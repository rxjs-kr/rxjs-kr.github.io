{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "reduce",
            "range": [
              9,
              15
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 15
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "reduce",
            "range": [
              9,
              15
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 15
              }
            }
          },
          "range": [
            9,
            15
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 15
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./reduce",
        "raw": "'./reduce'",
        "range": [
          23,
          33
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 23
          },
          "end": {
            "line": 1,
            "column": 33
          }
        }
      },
      "range": [
        0,
        34
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 34
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * <img src=\"./img/max.png\" width=\"100%\">\r\n *\r\n * @example <caption>Get the maximal value of a series of numbers</caption>\r\n * Rx.Observable.of(5, 4, 7, 2, 8)\r\n *   .max()\r\n *   .subscribe(x => console.log(x)); // -> 8\r\n *\r\n * @example <caption>Use a comparer function to get the maximal item</caption>\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * Observable.of<Person>({age: 7, name: 'Foo'},\r\n *                       {age: 5, name: 'Bar'},\r\n *                       {age: 9, name: 'Beer'})\r\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\r\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\r\n * }\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable} An Observable that emits item with the largest value.\r\n * @method max\r\n * @owner Observable\r\n ",
          "range": [
            36,
            1234
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "max",
          "range": [
            1252,
            1255
          ],
          "loc": {
            "start": {
              "line": 33,
              "column": 16
            },
            "end": {
              "line": 33,
              "column": 19
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "comparer",
            "range": [
              1256,
              1264
            ],
            "loc": {
              "start": {
                "line": 33,
                "column": 20
              },
              "end": {
                "line": 33,
                "column": 28
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "max",
                    "range": [
                      1279,
                      1282
                    ],
                    "loc": {
                      "start": {
                        "line": 34,
                        "column": 10
                      },
                      "end": {
                        "line": 34,
                        "column": 13
                      }
                    }
                  },
                  "init": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "comparer",
                          "range": [
                            1293,
                            1301
                          ],
                          "loc": {
                            "start": {
                              "line": 34,
                              "column": 24
                            },
                            "end": {
                              "line": 34,
                              "column": 32
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          1286,
                          1301
                        ],
                        "loc": {
                          "start": {
                            "line": 34,
                            "column": 17
                          },
                          "end": {
                            "line": 34,
                            "column": 32
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'",
                        "range": [
                          1306,
                          1316
                        ],
                        "loc": {
                          "start": {
                            "line": 34,
                            "column": 37
                          },
                          "end": {
                            "line": 34,
                            "column": 47
                          }
                        }
                      },
                      "range": [
                        1286,
                        1316
                      ],
                      "loc": {
                        "start": {
                          "line": 34,
                          "column": 17
                        },
                        "end": {
                          "line": 34,
                          "column": 47
                        }
                      }
                    },
                    "consequent": {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1330,
                            1331
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 11
                            },
                            "end": {
                              "line": 35,
                              "column": 12
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1333,
                            1334
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 14
                            },
                            "end": {
                              "line": 35,
                              "column": 15
                            }
                          }
                        }
                      ],
                      "body": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "comparer",
                              "range": [
                                1339,
                                1347
                              ],
                              "loc": {
                                "start": {
                                  "line": 35,
                                  "column": 20
                                },
                                "end": {
                                  "line": 35,
                                  "column": 28
                                }
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "x",
                                "range": [
                                  1348,
                                  1349
                                ],
                                "loc": {
                                  "start": {
                                    "line": 35,
                                    "column": 29
                                  },
                                  "end": {
                                    "line": 35,
                                    "column": 30
                                  }
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "y",
                                "range": [
                                  1351,
                                  1352
                                ],
                                "loc": {
                                  "start": {
                                    "line": 35,
                                    "column": 32
                                  },
                                  "end": {
                                    "line": 35,
                                    "column": 33
                                  }
                                }
                              }
                            ],
                            "range": [
                              1339,
                              1353
                            ],
                            "loc": {
                              "start": {
                                "line": 35,
                                "column": 20
                              },
                              "end": {
                                "line": 35,
                                "column": 34
                              }
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0",
                            "range": [
                              1356,
                              1357
                            ],
                            "loc": {
                              "start": {
                                "line": 35,
                                "column": 37
                              },
                              "end": {
                                "line": 35,
                                "column": 38
                              }
                            }
                          },
                          "range": [
                            1339,
                            1357
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 20
                            },
                            "end": {
                              "line": 35,
                              "column": 38
                            }
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1360,
                            1361
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 41
                            },
                            "end": {
                              "line": 35,
                              "column": 42
                            }
                          }
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1364,
                            1365
                          ],
                          "loc": {
                            "start": {
                              "line": 35,
                              "column": 45
                            },
                            "end": {
                              "line": 35,
                              "column": 46
                            }
                          }
                        },
                        "range": [
                          1339,
                          1365
                        ],
                        "loc": {
                          "start": {
                            "line": 35,
                            "column": 20
                          },
                          "end": {
                            "line": 35,
                            "column": 46
                          }
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "range": [
                        1329,
                        1365
                      ],
                      "loc": {
                        "start": {
                          "line": 35,
                          "column": 10
                        },
                        "end": {
                          "line": 35,
                          "column": 46
                        }
                      }
                    },
                    "alternate": {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1378,
                            1379
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 11
                            },
                            "end": {
                              "line": 36,
                              "column": 12
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1381,
                            1382
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 14
                            },
                            "end": {
                              "line": 36,
                              "column": 15
                            }
                          }
                        }
                      ],
                      "body": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "Identifier",
                            "name": "x",
                            "range": [
                              1387,
                              1388
                            ],
                            "loc": {
                              "start": {
                                "line": 36,
                                "column": 20
                              },
                              "end": {
                                "line": 36,
                                "column": 21
                              }
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "y",
                            "range": [
                              1391,
                              1392
                            ],
                            "loc": {
                              "start": {
                                "line": 36,
                                "column": 24
                              },
                              "end": {
                                "line": 36,
                                "column": 25
                              }
                            }
                          },
                          "range": [
                            1387,
                            1392
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 20
                            },
                            "end": {
                              "line": 36,
                              "column": 25
                            }
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "x",
                          "range": [
                            1395,
                            1396
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 28
                            },
                            "end": {
                              "line": 36,
                              "column": 29
                            }
                          }
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "y",
                          "range": [
                            1399,
                            1400
                          ],
                          "loc": {
                            "start": {
                              "line": 36,
                              "column": 32
                            },
                            "end": {
                              "line": 36,
                              "column": 33
                            }
                          }
                        },
                        "range": [
                          1387,
                          1400
                        ],
                        "loc": {
                          "start": {
                            "line": 36,
                            "column": 20
                          },
                          "end": {
                            "line": 36,
                            "column": 33
                          }
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "range": [
                        1377,
                        1400
                      ],
                      "loc": {
                        "start": {
                          "line": 36,
                          "column": 10
                        },
                        "end": {
                          "line": 36,
                          "column": 33
                        }
                      }
                    },
                    "range": [
                      1285,
                      1400
                    ],
                    "loc": {
                      "start": {
                        "line": 34,
                        "column": 16
                      },
                      "end": {
                        "line": 36,
                        "column": 33
                      }
                    }
                  },
                  "range": [
                    1279,
                    1400
                  ],
                  "loc": {
                    "start": {
                      "line": 34,
                      "column": 10
                    },
                    "end": {
                      "line": 36,
                      "column": 33
                    }
                  }
                }
              ],
              "kind": "const",
              "range": [
                1273,
                1401
              ],
              "loc": {
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 34
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "reduce",
                  "range": [
                    1414,
                    1420
                  ],
                  "loc": {
                    "start": {
                      "line": 37,
                      "column": 11
                    },
                    "end": {
                      "line": 37,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "max",
                    "range": [
                      1421,
                      1424
                    ],
                    "loc": {
                      "start": {
                        "line": 37,
                        "column": 18
                      },
                      "end": {
                        "line": 37,
                        "column": 21
                      }
                    }
                  }
                ],
                "range": [
                  1414,
                  1425
                ],
                "loc": {
                  "start": {
                    "line": 37,
                    "column": 11
                  },
                  "end": {
                    "line": 37,
                    "column": 22
                  }
                }
              },
              "range": [
                1407,
                1426
              ],
              "loc": {
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 23
                }
              }
            }
          ],
          "range": [
            1266,
            1429
          ],
          "loc": {
            "start": {
              "line": 33,
              "column": 30
            },
            "end": {
              "line": 38,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1243,
          1429
        ],
        "loc": {
          "start": {
            "line": 33,
            "column": 7
          },
          "end": {
            "line": 38,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * <img src=\"./img/max.png\" width=\"100%\">\r\n *\r\n * @example <caption>Get the maximal value of a series of numbers</caption>\r\n * Rx.Observable.of(5, 4, 7, 2, 8)\r\n *   .max()\r\n *   .subscribe(x => console.log(x)); // -> 8\r\n *\r\n * @example <caption>Use a comparer function to get the maximal item</caption>\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * Observable.of<Person>({age: 7, name: 'Foo'},\r\n *                       {age: 5, name: 'Bar'},\r\n *                       {age: 9, name: 'Beer'})\r\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\r\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\r\n * }\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable} An Observable that emits item with the largest value.\r\n * @method max\r\n * @owner Observable\r\n ",
            "range": [
              36,
              1234
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 32,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=max.js.map",
            "range": [
              1431,
              1462
            ],
            "loc": {
              "start": {
                "line": 39,
                "column": 0
              },
              "end": {
                "line": 39,
                "column": 31
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1236,
        1429
      ],
      "loc": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * <img src=\"./img/max.png\" width=\"100%\">\r\n *\r\n * @example <caption>Get the maximal value of a series of numbers</caption>\r\n * Rx.Observable.of(5, 4, 7, 2, 8)\r\n *   .max()\r\n *   .subscribe(x => console.log(x)); // -> 8\r\n *\r\n * @example <caption>Use a comparer function to get the maximal item</caption>\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * Observable.of<Person>({age: 7, name: 'Foo'},\r\n *                       {age: 5, name: 'Bar'},\r\n *                       {age: 9, name: 'Beer'})\r\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\r\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\r\n * }\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable} An Observable that emits item with the largest value.\r\n * @method max\r\n * @owner Observable\r\n ",
          "range": [
            36,
            1234
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=max.js.map",
          "range": [
            1431,
            1462
          ],
          "loc": {
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 31
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1429
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 38,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\r\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\r\n * and when source Observable completes it emits a single item: the item with the largest value.\r\n *\r\n * <img src=\"./img/max.png\" width=\"100%\">\r\n *\r\n * @example <caption>Get the maximal value of a series of numbers</caption>\r\n * Rx.Observable.of(5, 4, 7, 2, 8)\r\n *   .max()\r\n *   .subscribe(x => console.log(x)); // -> 8\r\n *\r\n * @example <caption>Use a comparer function to get the maximal item</caption>\r\n * interface Person {\r\n *   age: number,\r\n *   name: string\r\n * }\r\n * Observable.of<Person>({age: 7, name: 'Foo'},\r\n *                       {age: 5, name: 'Bar'},\r\n *                       {age: 9, name: 'Beer'})\r\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\r\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\r\n * }\r\n *\r\n * @see {@link min}\r\n *\r\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\r\n * value of two items.\r\n * @return {Observable} An Observable that emits item with the largest value.\r\n * @method max\r\n * @owner Observable\r\n ",
      "range": [
        36,
        1234
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=max.js.map",
      "range": [
        1431,
        1462
      ],
      "loc": {
        "start": {
          "line": 39,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 31
        }
      }
    }
  ]
}