{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "distinctUntilChanged",
            "range": [
              9,
              29
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 29
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "distinctUntilChanged",
            "range": [
              9,
              29
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 29
              }
            }
          },
          "range": [
            9,
            29
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 29
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./distinctUntilChanged",
        "raw": "'./distinctUntilChanged'",
        "range": [
          37,
          61
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 37
          },
          "end": {
            "line": 1,
            "column": 61
          }
        }
      },
      "range": [
        0,
        62
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 62
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            64,
            99
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\n * using a property accessed by using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>An example comparing the name of persons</caption>\r\n *\r\n *  interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilKeyChanged('name')\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @example <caption>An example comparing the first letters of the name</caption>\r\n *\r\n * interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo1'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo2'},\r\n *     { age: 6, name: 'Foo3'})\r\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param {string} key String key for object property lookup on each item.\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\r\n * @method distinctUntilKeyChanged\r\n * @owner Observable\r\n ",
          "range": [
            101,
            2143
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 59,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "distinctUntilKeyChanged",
          "range": [
            2161,
            2184
          ],
          "loc": {
            "start": {
              "line": 60,
              "column": 16
            },
            "end": {
              "line": 60,
              "column": 39
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "key",
            "range": [
              2185,
              2188
            ],
            "loc": {
              "start": {
                "line": 60,
                "column": 40
              },
              "end": {
                "line": 60,
                "column": 43
              }
            }
          },
          {
            "type": "Identifier",
            "name": "compare",
            "range": [
              2190,
              2197
            ],
            "loc": {
              "start": {
                "line": 60,
                "column": 45
              },
              "end": {
                "line": 60,
                "column": 52
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "distinctUntilChanged",
                  "range": [
                    2213,
                    2233
                  ],
                  "loc": {
                    "start": {
                      "line": 61,
                      "column": 11
                    },
                    "end": {
                      "line": 61,
                      "column": 31
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "x",
                        "range": [
                          2235,
                          2236
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 33
                          },
                          "end": {
                            "line": 61,
                            "column": 34
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "y",
                        "range": [
                          2238,
                          2239
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 36
                          },
                          "end": {
                            "line": 61,
                            "column": 37
                          }
                        }
                      }
                    ],
                    "body": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "compare",
                        "range": [
                          2244,
                          2251
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 42
                          },
                          "end": {
                            "line": 61,
                            "column": 49
                          }
                        }
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "compare",
                          "range": [
                            2254,
                            2261
                          ],
                          "loc": {
                            "start": {
                              "line": 61,
                              "column": 52
                            },
                            "end": {
                              "line": 61,
                              "column": 59
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "x",
                              "range": [
                                2262,
                                2263
                              ],
                              "loc": {
                                "start": {
                                  "line": 61,
                                  "column": 60
                                },
                                "end": {
                                  "line": 61,
                                  "column": 61
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key",
                              "range": [
                                2264,
                                2267
                              ],
                              "loc": {
                                "start": {
                                  "line": 61,
                                  "column": 62
                                },
                                "end": {
                                  "line": 61,
                                  "column": 65
                                }
                              }
                            },
                            "range": [
                              2262,
                              2268
                            ],
                            "loc": {
                              "start": {
                                "line": 61,
                                "column": 60
                              },
                              "end": {
                                "line": 61,
                                "column": 66
                              }
                            }
                          },
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "y",
                              "range": [
                                2270,
                                2271
                              ],
                              "loc": {
                                "start": {
                                  "line": 61,
                                  "column": 68
                                },
                                "end": {
                                  "line": 61,
                                  "column": 69
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key",
                              "range": [
                                2272,
                                2275
                              ],
                              "loc": {
                                "start": {
                                  "line": 61,
                                  "column": 70
                                },
                                "end": {
                                  "line": 61,
                                  "column": 73
                                }
                              }
                            },
                            "range": [
                              2270,
                              2276
                            ],
                            "loc": {
                              "start": {
                                "line": 61,
                                "column": 68
                              },
                              "end": {
                                "line": 61,
                                "column": 74
                              }
                            }
                          }
                        ],
                        "range": [
                          2254,
                          2277
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 52
                          },
                          "end": {
                            "line": 61,
                            "column": 75
                          }
                        }
                      },
                      "alternate": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "x",
                            "range": [
                              2280,
                              2281
                            ],
                            "loc": {
                              "start": {
                                "line": 61,
                                "column": 78
                              },
                              "end": {
                                "line": 61,
                                "column": 79
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key",
                            "range": [
                              2282,
                              2285
                            ],
                            "loc": {
                              "start": {
                                "line": 61,
                                "column": 80
                              },
                              "end": {
                                "line": 61,
                                "column": 83
                              }
                            }
                          },
                          "range": [
                            2280,
                            2286
                          ],
                          "loc": {
                            "start": {
                              "line": 61,
                              "column": 78
                            },
                            "end": {
                              "line": 61,
                              "column": 84
                            }
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "y",
                            "range": [
                              2291,
                              2292
                            ],
                            "loc": {
                              "start": {
                                "line": 61,
                                "column": 89
                              },
                              "end": {
                                "line": 61,
                                "column": 90
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key",
                            "range": [
                              2293,
                              2296
                            ],
                            "loc": {
                              "start": {
                                "line": 61,
                                "column": 91
                              },
                              "end": {
                                "line": 61,
                                "column": 94
                              }
                            }
                          },
                          "range": [
                            2291,
                            2297
                          ],
                          "loc": {
                            "start": {
                              "line": 61,
                              "column": 89
                            },
                            "end": {
                              "line": 61,
                              "column": 95
                            }
                          }
                        },
                        "range": [
                          2280,
                          2297
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 78
                          },
                          "end": {
                            "line": 61,
                            "column": 95
                          }
                        }
                      },
                      "range": [
                        2244,
                        2297
                      ],
                      "loc": {
                        "start": {
                          "line": 61,
                          "column": 42
                        },
                        "end": {
                          "line": 61,
                          "column": 95
                        }
                      }
                    },
                    "generator": false,
                    "expression": true,
                    "range": [
                      2234,
                      2297
                    ],
                    "loc": {
                      "start": {
                        "line": 61,
                        "column": 32
                      },
                      "end": {
                        "line": 61,
                        "column": 95
                      }
                    }
                  }
                ],
                "range": [
                  2213,
                  2298
                ],
                "loc": {
                  "start": {
                    "line": 61,
                    "column": 11
                  },
                  "end": {
                    "line": 61,
                    "column": 96
                  }
                }
              },
              "range": [
                2206,
                2299
              ],
              "loc": {
                "start": {
                  "line": 61,
                  "column": 4
                },
                "end": {
                  "line": 61,
                  "column": 97
                }
              }
            }
          ],
          "range": [
            2199,
            2302
          ],
          "loc": {
            "start": {
              "line": 60,
              "column": 54
            },
            "end": {
              "line": 62,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2152,
          2302
        ],
        "loc": {
          "start": {
            "line": 60,
            "column": 7
          },
          "end": {
            "line": 62,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              64,
              99
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\n * using a property accessed by using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>An example comparing the name of persons</caption>\r\n *\r\n *  interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilKeyChanged('name')\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @example <caption>An example comparing the first letters of the name</caption>\r\n *\r\n * interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo1'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo2'},\r\n *     { age: 6, name: 'Foo3'})\r\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param {string} key String key for object property lookup on each item.\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\r\n * @method distinctUntilKeyChanged\r\n * @owner Observable\r\n ",
            "range": [
              101,
              2143
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 59,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=distinctUntilKeyChanged.js.map",
            "range": [
              2304,
              2355
            ],
            "loc": {
              "start": {
                "line": 63,
                "column": 0
              },
              "end": {
                "line": 63,
                "column": 51
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2145,
        2302
      ],
      "loc": {
        "start": {
          "line": 60,
          "column": 0
        },
        "end": {
          "line": 62,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            64,
            99
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\n * using a property accessed by using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>An example comparing the name of persons</caption>\r\n *\r\n *  interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilKeyChanged('name')\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @example <caption>An example comparing the first letters of the name</caption>\r\n *\r\n * interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo1'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo2'},\r\n *     { age: 6, name: 'Foo3'})\r\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param {string} key String key for object property lookup on each item.\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\r\n * @method distinctUntilKeyChanged\r\n * @owner Observable\r\n ",
          "range": [
            101,
            2143
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 59,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=distinctUntilKeyChanged.js.map",
          "range": [
            2304,
            2355
          ],
          "loc": {
            "start": {
              "line": 63,
              "column": 0
            },
            "end": {
              "line": 63,
              "column": 51
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2302
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 62,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        64,
        99
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\r\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\r\n * using a property accessed by using the key provided to check if the two items are distinct.\r\n *\r\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\r\n *\r\n * If a comparator function is not provided, an equality check is used by default.\r\n *\r\n * @example <caption>An example comparing the name of persons</caption>\r\n *\r\n *  interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo'},\r\n *     { age: 6, name: 'Foo'})\r\n *     .distinctUntilKeyChanged('name')\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo' }\r\n *\r\n * @example <caption>An example comparing the first letters of the name</caption>\r\n *\r\n * interface Person {\r\n *     age: number,\r\n *     name: string\r\n *  }\r\n *\r\n * Observable.of<Person>(\r\n *     { age: 4, name: 'Foo1'},\r\n *     { age: 7, name: 'Bar'},\r\n *     { age: 5, name: 'Foo2'},\r\n *     { age: 6, name: 'Foo3'})\r\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\r\n *     .subscribe(x => console.log(x));\r\n *\r\n * // displays:\r\n * // { age: 4, name: 'Foo1' }\r\n * // { age: 7, name: 'Bar' }\r\n * // { age: 5, name: 'Foo2' }\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n *\r\n * @param {string} key String key for object property lookup on each item.\r\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\r\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\r\n * @method distinctUntilKeyChanged\r\n * @owner Observable\r\n ",
      "range": [
        101,
        2143
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 59,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=distinctUntilKeyChanged.js.map",
      "range": [
        2304,
        2355
      ],
      "loc": {
        "start": {
          "line": 63,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 51
        }
      }
    }
  ]
}