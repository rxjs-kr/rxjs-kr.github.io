{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "async",
            "range": [
              9,
              14
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 14
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "async",
            "range": [
              9,
              14
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 14
              }
            }
          },
          "range": [
            9,
            14
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 14
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../scheduler/async",
        "raw": "'../scheduler/async'",
        "range": [
          22,
          42
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 22
          },
          "end": {
            "line": 1,
            "column": 42
          }
        }
      },
      "range": [
        0,
        43
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 43
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              54,
              65
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              54,
              65
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 20
              }
            }
          },
          "range": [
            54,
            65
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          73,
          94
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 28
          },
          "end": {
            "line": 2,
            "column": 49
          }
        }
      },
      "range": [
        45,
        95
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              120,
              131
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 23
              },
              "end": {
                "line": 3,
                "column": 34
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "bufferTime",
            "range": [
              106,
              116
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 19
              }
            }
          },
          "range": [
            106,
            131
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 34
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          139,
          153
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 42
          },
          "end": {
            "line": 3,
            "column": 56
          }
        }
      },
      "range": [
        97,
        154
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 57
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            156,
            191
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Buffers the source Observable values for a specific time period.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * those arrays periodically in time.</span>\r\n *\r\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\r\n *\r\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\r\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\r\n * resets the buffer every `bufferTimeSpan` milliseconds. If\r\n * `bufferCreationInterval` is given, this operator opens the buffer every\r\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\r\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\r\n * `maxBufferSize` is specified, the buffer will be closed either after\r\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\r\n *\r\n * @example <caption>Every second, emit an array of the recent click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(1000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(2000, 5000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowTime}\r\n *\r\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\r\n * @param {number} [bufferCreationInterval] The interval at which to start new\r\n * buffers.\r\n * @param {number} [maxBufferSize] The maximum buffer size.\r\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\r\n * intervals that determine buffer boundaries.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferTime\r\n * @owner Observable\r\n ",
          "range": [
            193,
            2188
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "bufferTime",
          "range": [
            2206,
            2216
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 16
            },
            "end": {
              "line": 48,
              "column": 26
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "bufferTimeSpan",
            "range": [
              2217,
              2231
            ],
            "loc": {
              "start": {
                "line": 48,
                "column": 27
              },
              "end": {
                "line": 48,
                "column": 41
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "length",
                    "range": [
                      2244,
                      2250
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 8
                      },
                      "end": {
                        "line": 49,
                        "column": 14
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "arguments",
                      "range": [
                        2253,
                        2262
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 17
                        },
                        "end": {
                          "line": 49,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        2263,
                        2269
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 27
                        },
                        "end": {
                          "line": 49,
                          "column": 33
                        }
                      }
                    },
                    "range": [
                      2253,
                      2269
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 17
                      },
                      "end": {
                        "line": 49,
                        "column": 33
                      }
                    }
                  },
                  "range": [
                    2244,
                    2269
                  ],
                  "loc": {
                    "start": {
                      "line": 49,
                      "column": 8
                    },
                    "end": {
                      "line": 49,
                      "column": 33
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                2240,
                2270
              ],
              "loc": {
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 34
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      2280,
                      2289
                    ],
                    "loc": {
                      "start": {
                        "line": 50,
                        "column": 8
                      },
                      "end": {
                        "line": 50,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "async",
                    "range": [
                      2292,
                      2297
                    ],
                    "loc": {
                      "start": {
                        "line": 50,
                        "column": 20
                      },
                      "end": {
                        "line": 50,
                        "column": 25
                      }
                    }
                  },
                  "range": [
                    2280,
                    2297
                  ],
                  "loc": {
                    "start": {
                      "line": 50,
                      "column": 8
                    },
                    "end": {
                      "line": 50,
                      "column": 25
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                2276,
                2298
              ],
              "loc": {
                "start": {
                  "line": 50,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 26
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    2308,
                    2319
                  ],
                  "loc": {
                    "start": {
                      "line": 51,
                      "column": 8
                    },
                    "end": {
                      "line": 51,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "arguments",
                      "range": [
                        2320,
                        2329
                      ],
                      "loc": {
                        "start": {
                          "line": 51,
                          "column": 20
                        },
                        "end": {
                          "line": 51,
                          "column": 29
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "arguments",
                          "range": [
                            2330,
                            2339
                          ],
                          "loc": {
                            "start": {
                              "line": 51,
                              "column": 30
                            },
                            "end": {
                              "line": 51,
                              "column": 39
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            2340,
                            2346
                          ],
                          "loc": {
                            "start": {
                              "line": 51,
                              "column": 40
                            },
                            "end": {
                              "line": 51,
                              "column": 46
                            }
                          }
                        },
                        "range": [
                          2330,
                          2346
                        ],
                        "loc": {
                          "start": {
                            "line": 51,
                            "column": 30
                          },
                          "end": {
                            "line": 51,
                            "column": 46
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          2349,
                          2350
                        ],
                        "loc": {
                          "start": {
                            "line": 51,
                            "column": 49
                          },
                          "end": {
                            "line": 51,
                            "column": 50
                          }
                        }
                      },
                      "range": [
                        2330,
                        2350
                      ],
                      "loc": {
                        "start": {
                          "line": 51,
                          "column": 30
                        },
                        "end": {
                          "line": 51,
                          "column": 50
                        }
                      }
                    },
                    "range": [
                      2320,
                      2351
                    ],
                    "loc": {
                      "start": {
                        "line": 51,
                        "column": 20
                      },
                      "end": {
                        "line": 51,
                        "column": 51
                      }
                    }
                  }
                ],
                "range": [
                  2308,
                  2352
                ],
                "loc": {
                  "start": {
                    "line": 51,
                    "column": 8
                  },
                  "end": {
                    "line": 51,
                    "column": 52
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          2365,
                          2374
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 8
                          },
                          "end": {
                            "line": 52,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arguments",
                          "range": [
                            2377,
                            2386
                          ],
                          "loc": {
                            "start": {
                              "line": 52,
                              "column": 20
                            },
                            "end": {
                              "line": 52,
                              "column": 29
                            }
                          }
                        },
                        "property": {
                          "type": "BinaryExpression",
                          "operator": "-",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "arguments",
                              "range": [
                                2387,
                                2396
                              ],
                              "loc": {
                                "start": {
                                  "line": 52,
                                  "column": 30
                                },
                                "end": {
                                  "line": 52,
                                  "column": 39
                                }
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length",
                              "range": [
                                2397,
                                2403
                              ],
                              "loc": {
                                "start": {
                                  "line": 52,
                                  "column": 40
                                },
                                "end": {
                                  "line": 52,
                                  "column": 46
                                }
                              }
                            },
                            "range": [
                              2387,
                              2403
                            ],
                            "loc": {
                              "start": {
                                "line": 52,
                                "column": 30
                              },
                              "end": {
                                "line": 52,
                                "column": 46
                              }
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1",
                            "range": [
                              2406,
                              2407
                            ],
                            "loc": {
                              "start": {
                                "line": 52,
                                "column": 49
                              },
                              "end": {
                                "line": 52,
                                "column": 50
                              }
                            }
                          },
                          "range": [
                            2387,
                            2407
                          ],
                          "loc": {
                            "start": {
                              "line": 52,
                              "column": 30
                            },
                            "end": {
                              "line": 52,
                              "column": 50
                            }
                          }
                        },
                        "range": [
                          2377,
                          2408
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 20
                          },
                          "end": {
                            "line": 52,
                            "column": 51
                          }
                        }
                      },
                      "range": [
                        2365,
                        2408
                      ],
                      "loc": {
                        "start": {
                          "line": 52,
                          "column": 8
                        },
                        "end": {
                          "line": 52,
                          "column": 51
                        }
                      }
                    },
                    "range": [
                      2365,
                      2409
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 8
                      },
                      "end": {
                        "line": 52,
                        "column": 52
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "UpdateExpression",
                      "operator": "--",
                      "argument": {
                        "type": "Identifier",
                        "name": "length",
                        "range": [
                          2419,
                          2425
                        ],
                        "loc": {
                          "start": {
                            "line": 53,
                            "column": 8
                          },
                          "end": {
                            "line": 53,
                            "column": 14
                          }
                        }
                      },
                      "prefix": false,
                      "range": [
                        2419,
                        2427
                      ],
                      "loc": {
                        "start": {
                          "line": 53,
                          "column": 8
                        },
                        "end": {
                          "line": 53,
                          "column": 16
                        }
                      }
                    },
                    "range": [
                      2419,
                      2428
                    ],
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 8
                      },
                      "end": {
                        "line": 53,
                        "column": 17
                      }
                    }
                  }
                ],
                "range": [
                  2354,
                  2435
                ],
                "loc": {
                  "start": {
                    "line": 51,
                    "column": 54
                  },
                  "end": {
                    "line": 54,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                2304,
                2435
              ],
              "loc": {
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 54,
                  "column": 5
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "bufferCreationInterval",
                    "range": [
                      2445,
                      2467
                    ],
                    "loc": {
                      "start": {
                        "line": 55,
                        "column": 8
                      },
                      "end": {
                        "line": 55,
                        "column": 30
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      2470,
                      2474
                    ],
                    "loc": {
                      "start": {
                        "line": 55,
                        "column": 33
                      },
                      "end": {
                        "line": 55,
                        "column": 37
                      }
                    }
                  },
                  "range": [
                    2445,
                    2474
                  ],
                  "loc": {
                    "start": {
                      "line": 55,
                      "column": 8
                    },
                    "end": {
                      "line": 55,
                      "column": 37
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                2441,
                2475
              ],
              "loc": {
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 55,
                  "column": 38
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": ">=",
                "left": {
                  "type": "Identifier",
                  "name": "length",
                  "range": [
                    2485,
                    2491
                  ],
                  "loc": {
                    "start": {
                      "line": 56,
                      "column": 8
                    },
                    "end": {
                      "line": 56,
                      "column": 14
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 2,
                  "raw": "2",
                  "range": [
                    2495,
                    2496
                  ],
                  "loc": {
                    "start": {
                      "line": 56,
                      "column": 18
                    },
                    "end": {
                      "line": 56,
                      "column": 19
                    }
                  }
                },
                "range": [
                  2485,
                  2496
                ],
                "loc": {
                  "start": {
                    "line": 56,
                    "column": 8
                  },
                  "end": {
                    "line": 56,
                    "column": 19
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "bufferCreationInterval",
                        "range": [
                          2509,
                          2531
                        ],
                        "loc": {
                          "start": {
                            "line": 57,
                            "column": 8
                          },
                          "end": {
                            "line": 57,
                            "column": 30
                          }
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arguments",
                          "range": [
                            2534,
                            2543
                          ],
                          "loc": {
                            "start": {
                              "line": 57,
                              "column": 33
                            },
                            "end": {
                              "line": 57,
                              "column": 42
                            }
                          }
                        },
                        "property": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1",
                          "range": [
                            2544,
                            2545
                          ],
                          "loc": {
                            "start": {
                              "line": 57,
                              "column": 43
                            },
                            "end": {
                              "line": 57,
                              "column": 44
                            }
                          }
                        },
                        "range": [
                          2534,
                          2546
                        ],
                        "loc": {
                          "start": {
                            "line": 57,
                            "column": 33
                          },
                          "end": {
                            "line": 57,
                            "column": 45
                          }
                        }
                      },
                      "range": [
                        2509,
                        2546
                      ],
                      "loc": {
                        "start": {
                          "line": 57,
                          "column": 8
                        },
                        "end": {
                          "line": 57,
                          "column": 45
                        }
                      }
                    },
                    "range": [
                      2509,
                      2547
                    ],
                    "loc": {
                      "start": {
                        "line": 57,
                        "column": 8
                      },
                      "end": {
                        "line": 57,
                        "column": 46
                      }
                    }
                  }
                ],
                "range": [
                  2498,
                  2554
                ],
                "loc": {
                  "start": {
                    "line": 56,
                    "column": 21
                  },
                  "end": {
                    "line": 58,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                2481,
                2554
              ],
              "loc": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 5
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "maxBufferSize",
                    "range": [
                      2564,
                      2577
                    ],
                    "loc": {
                      "start": {
                        "line": 59,
                        "column": 8
                      },
                      "end": {
                        "line": 59,
                        "column": 21
                      }
                    }
                  },
                  "init": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Number",
                      "range": [
                        2580,
                        2586
                      ],
                      "loc": {
                        "start": {
                          "line": 59,
                          "column": 24
                        },
                        "end": {
                          "line": 59,
                          "column": 30
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "POSITIVE_INFINITY",
                      "range": [
                        2587,
                        2604
                      ],
                      "loc": {
                        "start": {
                          "line": 59,
                          "column": 31
                        },
                        "end": {
                          "line": 59,
                          "column": 48
                        }
                      }
                    },
                    "range": [
                      2580,
                      2604
                    ],
                    "loc": {
                      "start": {
                        "line": 59,
                        "column": 24
                      },
                      "end": {
                        "line": 59,
                        "column": 48
                      }
                    }
                  },
                  "range": [
                    2564,
                    2604
                  ],
                  "loc": {
                    "start": {
                      "line": 59,
                      "column": 8
                    },
                    "end": {
                      "line": 59,
                      "column": 48
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                2560,
                2605
              ],
              "loc": {
                "start": {
                  "line": 59,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 49
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": ">=",
                "left": {
                  "type": "Identifier",
                  "name": "length",
                  "range": [
                    2615,
                    2621
                  ],
                  "loc": {
                    "start": {
                      "line": 60,
                      "column": 8
                    },
                    "end": {
                      "line": 60,
                      "column": 14
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 3,
                  "raw": "3",
                  "range": [
                    2625,
                    2626
                  ],
                  "loc": {
                    "start": {
                      "line": 60,
                      "column": 18
                    },
                    "end": {
                      "line": 60,
                      "column": 19
                    }
                  }
                },
                "range": [
                  2615,
                  2626
                ],
                "loc": {
                  "start": {
                    "line": 60,
                    "column": 8
                  },
                  "end": {
                    "line": 60,
                    "column": 19
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "maxBufferSize",
                        "range": [
                          2639,
                          2652
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 8
                          },
                          "end": {
                            "line": 61,
                            "column": 21
                          }
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arguments",
                          "range": [
                            2655,
                            2664
                          ],
                          "loc": {
                            "start": {
                              "line": 61,
                              "column": 24
                            },
                            "end": {
                              "line": 61,
                              "column": 33
                            }
                          }
                        },
                        "property": {
                          "type": "Literal",
                          "value": 2,
                          "raw": "2",
                          "range": [
                            2665,
                            2666
                          ],
                          "loc": {
                            "start": {
                              "line": 61,
                              "column": 34
                            },
                            "end": {
                              "line": 61,
                              "column": 35
                            }
                          }
                        },
                        "range": [
                          2655,
                          2667
                        ],
                        "loc": {
                          "start": {
                            "line": 61,
                            "column": 24
                          },
                          "end": {
                            "line": 61,
                            "column": 36
                          }
                        }
                      },
                      "range": [
                        2639,
                        2667
                      ],
                      "loc": {
                        "start": {
                          "line": 61,
                          "column": 8
                        },
                        "end": {
                          "line": 61,
                          "column": 36
                        }
                      }
                    },
                    "range": [
                      2639,
                      2668
                    ],
                    "loc": {
                      "start": {
                        "line": 61,
                        "column": 8
                      },
                      "end": {
                        "line": 61,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  2628,
                  2675
                ],
                "loc": {
                  "start": {
                    "line": 60,
                    "column": 21
                  },
                  "end": {
                    "line": 62,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                2611,
                2675
              ],
              "loc": {
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 62,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      2688,
                      2699
                    ],
                    "loc": {
                      "start": {
                        "line": 63,
                        "column": 11
                      },
                      "end": {
                        "line": 63,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "bufferTimeSpan",
                      "range": [
                        2700,
                        2714
                      ],
                      "loc": {
                        "start": {
                          "line": 63,
                          "column": 23
                        },
                        "end": {
                          "line": 63,
                          "column": 37
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "bufferCreationInterval",
                      "range": [
                        2716,
                        2738
                      ],
                      "loc": {
                        "start": {
                          "line": 63,
                          "column": 39
                        },
                        "end": {
                          "line": 63,
                          "column": 61
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "maxBufferSize",
                      "range": [
                        2740,
                        2753
                      ],
                      "loc": {
                        "start": {
                          "line": 63,
                          "column": 63
                        },
                        "end": {
                          "line": 63,
                          "column": 76
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "scheduler",
                      "range": [
                        2755,
                        2764
                      ],
                      "loc": {
                        "start": {
                          "line": 63,
                          "column": 78
                        },
                        "end": {
                          "line": 63,
                          "column": 87
                        }
                      }
                    }
                  ],
                  "range": [
                    2688,
                    2765
                  ],
                  "loc": {
                    "start": {
                      "line": 63,
                      "column": 11
                    },
                    "end": {
                      "line": 63,
                      "column": 88
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2766,
                      2770
                    ],
                    "loc": {
                      "start": {
                        "line": 63,
                        "column": 89
                      },
                      "end": {
                        "line": 63,
                        "column": 93
                      }
                    }
                  }
                ],
                "range": [
                  2688,
                  2771
                ],
                "loc": {
                  "start": {
                    "line": 63,
                    "column": 11
                  },
                  "end": {
                    "line": 63,
                    "column": 94
                  }
                }
              },
              "range": [
                2681,
                2772
              ],
              "loc": {
                "start": {
                  "line": 63,
                  "column": 4
                },
                "end": {
                  "line": 63,
                  "column": 95
                }
              }
            }
          ],
          "range": [
            2233,
            2775
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 43
            },
            "end": {
              "line": 64,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2197,
          2775
        ],
        "loc": {
          "start": {
            "line": 48,
            "column": 7
          },
          "end": {
            "line": 64,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              156,
              191
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\r\n * Buffers the source Observable values for a specific time period.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * those arrays periodically in time.</span>\r\n *\r\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\r\n *\r\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\r\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\r\n * resets the buffer every `bufferTimeSpan` milliseconds. If\r\n * `bufferCreationInterval` is given, this operator opens the buffer every\r\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\r\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\r\n * `maxBufferSize` is specified, the buffer will be closed either after\r\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\r\n *\r\n * @example <caption>Every second, emit an array of the recent click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(1000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(2000, 5000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowTime}\r\n *\r\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\r\n * @param {number} [bufferCreationInterval] The interval at which to start new\r\n * buffers.\r\n * @param {number} [maxBufferSize] The maximum buffer size.\r\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\r\n * intervals that determine buffer boundaries.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferTime\r\n * @owner Observable\r\n ",
            "range": [
              193,
              2188
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 47,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=bufferTime.js.map",
            "range": [
              2777,
              2815
            ],
            "loc": {
              "start": {
                "line": 65,
                "column": 0
              },
              "end": {
                "line": 65,
                "column": 38
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2190,
        2775
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 0
        },
        "end": {
          "line": 64,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            156,
            191
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Buffers the source Observable values for a specific time period.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * those arrays periodically in time.</span>\r\n *\r\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\r\n *\r\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\r\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\r\n * resets the buffer every `bufferTimeSpan` milliseconds. If\r\n * `bufferCreationInterval` is given, this operator opens the buffer every\r\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\r\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\r\n * `maxBufferSize` is specified, the buffer will be closed either after\r\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\r\n *\r\n * @example <caption>Every second, emit an array of the recent click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(1000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(2000, 5000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowTime}\r\n *\r\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\r\n * @param {number} [bufferCreationInterval] The interval at which to start new\r\n * buffers.\r\n * @param {number} [maxBufferSize] The maximum buffer size.\r\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\r\n * intervals that determine buffer boundaries.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferTime\r\n * @owner Observable\r\n ",
          "range": [
            193,
            2188
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=bufferTime.js.map",
          "range": [
            2777,
            2815
          ],
          "loc": {
            "start": {
              "line": 65,
              "column": 0
            },
            "end": {
              "line": 65,
              "column": 38
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2775
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 64,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        156,
        191
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\r\n * Buffers the source Observable values for a specific time period.\r\n *\r\n * <span class=\"informal\">Collects values from the past as an array, and emits\r\n * those arrays periodically in time.</span>\r\n *\r\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\r\n *\r\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\r\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\r\n * resets the buffer every `bufferTimeSpan` milliseconds. If\r\n * `bufferCreationInterval` is given, this operator opens the buffer every\r\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\r\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\r\n * `maxBufferSize` is specified, the buffer will be closed either after\r\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\r\n *\r\n * @example <caption>Every second, emit an array of the recent click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(1000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var buffered = clicks.bufferTime(2000, 5000);\r\n * buffered.subscribe(x => console.log(x));\r\n *\r\n * @see {@link buffer}\r\n * @see {@link bufferCount}\r\n * @see {@link bufferToggle}\r\n * @see {@link bufferWhen}\r\n * @see {@link windowTime}\r\n *\r\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\r\n * @param {number} [bufferCreationInterval] The interval at which to start new\r\n * buffers.\r\n * @param {number} [maxBufferSize] The maximum buffer size.\r\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\r\n * intervals that determine buffer boundaries.\r\n * @return {Observable<T[]>} An observable of arrays of buffered values.\r\n * @method bufferTime\r\n * @owner Observable\r\n ",
      "range": [
        193,
        2188
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=bufferTime.js.map",
      "range": [
        2777,
        2815
      ],
      "loc": {
        "start": {
          "line": 65,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 38
        }
      }
    }
  ]
}