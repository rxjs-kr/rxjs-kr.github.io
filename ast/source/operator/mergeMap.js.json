{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrderMergeMap",
            "range": [
              21,
              40
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 21
              },
              "end": {
                "line": 1,
                "column": 40
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "mergeMap",
            "range": [
              9,
              17
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 17
              }
            }
          },
          "range": [
            9,
            40
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 40
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          48,
          62
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 48
          },
          "end": {
            "line": 1,
            "column": 62
          }
        }
      },
      "range": [
        0,
        63
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 63
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            65,
            100
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 'c');\r\n * var result = letters.mergeMap(x =>\r\n *   Rx.Observable.interval(1000).map(i => x+i)\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a,b,c with respective ascending integers\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method mergeMap\r\n * @owner Observable\r\n ",
          "range": [
            102,
            2554
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "mergeMap",
          "range": [
            2572,
            2580
          ],
          "loc": {
            "start": {
              "line": 61,
              "column": 16
            },
            "end": {
              "line": 61,
              "column": 24
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "project",
            "range": [
              2581,
              2588
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 25
              },
              "end": {
                "line": 61,
                "column": 32
              }
            }
          },
          {
            "type": "Identifier",
            "name": "resultSelector",
            "range": [
              2590,
              2604
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 34
              },
              "end": {
                "line": 61,
                "column": 48
              }
            }
          },
          {
            "type": "AssignmentPattern",
            "left": {
              "type": "Identifier",
              "name": "concurrent",
              "range": [
                2606,
                2616
              ],
              "loc": {
                "start": {
                  "line": 61,
                  "column": 50
                },
                "end": {
                  "line": 61,
                  "column": 60
                }
              }
            },
            "right": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "Number",
                "range": [
                  2619,
                  2625
                ],
                "loc": {
                  "start": {
                    "line": 61,
                    "column": 63
                  },
                  "end": {
                    "line": 61,
                    "column": 69
                  }
                }
              },
              "property": {
                "type": "Identifier",
                "name": "POSITIVE_INFINITY",
                "range": [
                  2626,
                  2643
                ],
                "loc": {
                  "start": {
                    "line": 61,
                    "column": 70
                  },
                  "end": {
                    "line": 61,
                    "column": 87
                  }
                }
              },
              "range": [
                2619,
                2643
              ],
              "loc": {
                "start": {
                  "line": 61,
                  "column": 63
                },
                "end": {
                  "line": 61,
                  "column": 87
                }
              }
            },
            "range": [
              2606,
              2643
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 50
              },
              "end": {
                "line": 61,
                "column": 87
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrderMergeMap",
                    "range": [
                      2659,
                      2678
                    ],
                    "loc": {
                      "start": {
                        "line": 62,
                        "column": 11
                      },
                      "end": {
                        "line": 62,
                        "column": 30
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "project",
                      "range": [
                        2679,
                        2686
                      ],
                      "loc": {
                        "start": {
                          "line": 62,
                          "column": 31
                        },
                        "end": {
                          "line": 62,
                          "column": 38
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "resultSelector",
                      "range": [
                        2688,
                        2702
                      ],
                      "loc": {
                        "start": {
                          "line": 62,
                          "column": 40
                        },
                        "end": {
                          "line": 62,
                          "column": 54
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "concurrent",
                      "range": [
                        2704,
                        2714
                      ],
                      "loc": {
                        "start": {
                          "line": 62,
                          "column": 56
                        },
                        "end": {
                          "line": 62,
                          "column": 66
                        }
                      }
                    }
                  ],
                  "range": [
                    2659,
                    2715
                  ],
                  "loc": {
                    "start": {
                      "line": 62,
                      "column": 11
                    },
                    "end": {
                      "line": 62,
                      "column": 67
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2716,
                      2720
                    ],
                    "loc": {
                      "start": {
                        "line": 62,
                        "column": 68
                      },
                      "end": {
                        "line": 62,
                        "column": 72
                      }
                    }
                  }
                ],
                "range": [
                  2659,
                  2721
                ],
                "loc": {
                  "start": {
                    "line": 62,
                    "column": 11
                  },
                  "end": {
                    "line": 62,
                    "column": 73
                  }
                }
              },
              "range": [
                2652,
                2722
              ],
              "loc": {
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 62,
                  "column": 74
                }
              }
            }
          ],
          "range": [
            2645,
            2725
          ],
          "loc": {
            "start": {
              "line": 61,
              "column": 89
            },
            "end": {
              "line": 63,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2563,
          2725
        ],
        "loc": {
          "start": {
            "line": 61,
            "column": 7
          },
          "end": {
            "line": 63,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              65,
              100
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 'c');\r\n * var result = letters.mergeMap(x =>\r\n *   Rx.Observable.interval(1000).map(i => x+i)\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a,b,c with respective ascending integers\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method mergeMap\r\n * @owner Observable\r\n ",
            "range": [
              102,
              2554
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 60,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=mergeMap.js.map",
            "range": [
              2727,
              2763
            ],
            "loc": {
              "start": {
                "line": 64,
                "column": 0
              },
              "end": {
                "line": 64,
                "column": 36
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2556,
        2725
      ],
      "loc": {
        "start": {
          "line": 61,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            65,
            100
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 'c');\r\n * var result = letters.mergeMap(x =>\r\n *   Rx.Observable.interval(1000).map(i => x+i)\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a,b,c with respective ascending integers\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method mergeMap\r\n * @owner Observable\r\n ",
          "range": [
            102,
            2554
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=mergeMap.js.map",
          "range": [
            2727,
            2763
          ],
          "loc": {
            "start": {
              "line": 64,
              "column": 0
            },
            "end": {
              "line": 64,
              "column": 36
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2725
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 63,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        65,
        100
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 'c');\r\n * var result = letters.mergeMap(x =>\r\n *   Rx.Observable.interval(1000).map(i => x+i)\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a,b,c with respective ascending integers\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method mergeMap\r\n * @owner Observable\r\n ",
      "range": [
        102,
        2554
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=mergeMap.js.map",
      "range": [
        2727,
        2763
      ],
      "loc": {
        "start": {
          "line": 64,
          "column": 0
        },
        "end": {
          "line": 64,
          "column": 36
        }
      }
    }
  ]
}