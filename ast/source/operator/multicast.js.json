{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              22,
              33
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 22
              },
              "end": {
                "line": 1,
                "column": 33
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "multicast",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            9,
            33
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 33
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          41,
          55
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 41
          },
          "end": {
            "line": 1,
            "column": 55
          }
        }
      },
      "range": [
        0,
        56
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 56
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            58,
            93
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Returns an Observable that emits the results of invoking a specified selector on items\r\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\r\n *\r\n * <img src=\"./img/multicast.png\" width=\"100%\">\r\n *\r\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\r\n * which the source sequence's elements will be multicast to the selector function\r\n * or Subject to push source elements into.\r\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\r\n * as many times as needed, without causing multiple subscriptions to the source stream.\r\n * Subscribers to the given source will receive all notifications of the source from the\r\n * time of the subscription forward.\r\n * @return {Observable} An Observable that emits the results of invoking the selector\r\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\r\n * the underlying stream.\r\n * @method multicast\r\n * @owner Observable\r\n ",
          "range": [
            95,
            1166
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "multicast",
          "range": [
            1184,
            1193
          ],
          "loc": {
            "start": {
              "line": 22,
              "column": 16
            },
            "end": {
              "line": 22,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "subjectOrSubjectFactory",
            "range": [
              1194,
              1217
            ],
            "loc": {
              "start": {
                "line": 22,
                "column": 26
              },
              "end": {
                "line": 22,
                "column": 49
              }
            }
          },
          {
            "type": "Identifier",
            "name": "selector",
            "range": [
              1219,
              1227
            ],
            "loc": {
              "start": {
                "line": 22,
                "column": 51
              },
              "end": {
                "line": 22,
                "column": 59
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      1243,
                      1254
                    ],
                    "loc": {
                      "start": {
                        "line": 23,
                        "column": 11
                      },
                      "end": {
                        "line": 23,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "subjectOrSubjectFactory",
                      "range": [
                        1255,
                        1278
                      ],
                      "loc": {
                        "start": {
                          "line": 23,
                          "column": 23
                        },
                        "end": {
                          "line": 23,
                          "column": 46
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "selector",
                      "range": [
                        1280,
                        1288
                      ],
                      "loc": {
                        "start": {
                          "line": 23,
                          "column": 48
                        },
                        "end": {
                          "line": 23,
                          "column": 56
                        }
                      }
                    }
                  ],
                  "range": [
                    1243,
                    1289
                  ],
                  "loc": {
                    "start": {
                      "line": 23,
                      "column": 11
                    },
                    "end": {
                      "line": 23,
                      "column": 57
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1290,
                      1294
                    ],
                    "loc": {
                      "start": {
                        "line": 23,
                        "column": 58
                      },
                      "end": {
                        "line": 23,
                        "column": 62
                      }
                    }
                  }
                ],
                "range": [
                  1243,
                  1295
                ],
                "loc": {
                  "start": {
                    "line": 23,
                    "column": 11
                  },
                  "end": {
                    "line": 23,
                    "column": 63
                  }
                }
              },
              "range": [
                1236,
                1296
              ],
              "loc": {
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 23,
                  "column": 64
                }
              }
            }
          ],
          "range": [
            1229,
            1299
          ],
          "loc": {
            "start": {
              "line": 22,
              "column": 61
            },
            "end": {
              "line": 24,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1175,
          1299
        ],
        "loc": {
          "start": {
            "line": 22,
            "column": 7
          },
          "end": {
            "line": 24,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              58,
              93
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\r\n * Returns an Observable that emits the results of invoking a specified selector on items\r\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\r\n *\r\n * <img src=\"./img/multicast.png\" width=\"100%\">\r\n *\r\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\r\n * which the source sequence's elements will be multicast to the selector function\r\n * or Subject to push source elements into.\r\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\r\n * as many times as needed, without causing multiple subscriptions to the source stream.\r\n * Subscribers to the given source will receive all notifications of the source from the\r\n * time of the subscription forward.\r\n * @return {Observable} An Observable that emits the results of invoking the selector\r\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\r\n * the underlying stream.\r\n * @method multicast\r\n * @owner Observable\r\n ",
            "range": [
              95,
              1166
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 21,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=multicast.js.map",
            "range": [
              1301,
              1338
            ],
            "loc": {
              "start": {
                "line": 25,
                "column": 0
              },
              "end": {
                "line": 25,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1168,
        1299
      ],
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 24,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            58,
            93
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Returns an Observable that emits the results of invoking a specified selector on items\r\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\r\n *\r\n * <img src=\"./img/multicast.png\" width=\"100%\">\r\n *\r\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\r\n * which the source sequence's elements will be multicast to the selector function\r\n * or Subject to push source elements into.\r\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\r\n * as many times as needed, without causing multiple subscriptions to the source stream.\r\n * Subscribers to the given source will receive all notifications of the source from the\r\n * time of the subscription forward.\r\n * @return {Observable} An Observable that emits the results of invoking the selector\r\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\r\n * the underlying stream.\r\n * @method multicast\r\n * @owner Observable\r\n ",
          "range": [
            95,
            1166
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=multicast.js.map",
          "range": [
            1301,
            1338
          ],
          "loc": {
            "start": {
              "line": 25,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1299
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 24,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        58,
        93
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\r\n * Returns an Observable that emits the results of invoking a specified selector on items\r\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\r\n *\r\n * <img src=\"./img/multicast.png\" width=\"100%\">\r\n *\r\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\r\n * which the source sequence's elements will be multicast to the selector function\r\n * or Subject to push source elements into.\r\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\r\n * as many times as needed, without causing multiple subscriptions to the source stream.\r\n * Subscribers to the given source will receive all notifications of the source from the\r\n * time of the subscription forward.\r\n * @return {Observable} An Observable that emits the results of invoking the selector\r\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\r\n * the underlying stream.\r\n * @method multicast\r\n * @owner Observable\r\n ",
      "range": [
        95,
        1166
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=multicast.js.map",
      "range": [
        1301,
        1338
      ],
      "loc": {
        "start": {
          "line": 25,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 37
        }
      }
    }
  ]
}