{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              22,
              33
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 22
              },
              "end": {
                "line": 1,
                "column": 33
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "findIndex",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            9,
            33
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 33
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          41,
          55
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 41
          },
          "end": {
            "line": 1,
            "column": 55
          }
        }
      },
      "range": [
        0,
        56
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 56
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\r\n * Emits only the index of the first value emitted by the source Observable that\r\n * meets some condition.\r\n *\r\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\r\n * found value, not the value itself.</span>\r\n *\r\n * <img src=\"./img/findIndex.png\" width=\"100%\">\r\n *\r\n * `findIndex` searches for the first item in the source Observable that matches\r\n * the specified condition embodied by the `predicate`, and returns the\r\n * (zero-based) index of the first occurrence in the source. Unlike\r\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\r\n * an error if a valid value is not found.\r\n *\r\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link first}\r\n * @see {@link take}\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\r\n * A function called with each item to test for condition matching.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of the index of the first item that\r\n * matches the condition.\r\n * @method find\r\n * @owner Observable\r\n ",
          "range": [
            58,
            1490
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "findIndex",
          "range": [
            1508,
            1517
          ],
          "loc": {
            "start": {
              "line": 36,
              "column": 16
            },
            "end": {
              "line": 36,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "predicate",
            "range": [
              1518,
              1527
            ],
            "loc": {
              "start": {
                "line": 36,
                "column": 26
              },
              "end": {
                "line": 36,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "thisArg",
            "range": [
              1529,
              1536
            ],
            "loc": {
              "start": {
                "line": 36,
                "column": 37
              },
              "end": {
                "line": 36,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      1552,
                      1563
                    ],
                    "loc": {
                      "start": {
                        "line": 37,
                        "column": 11
                      },
                      "end": {
                        "line": 37,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "predicate",
                      "range": [
                        1564,
                        1573
                      ],
                      "loc": {
                        "start": {
                          "line": 37,
                          "column": 23
                        },
                        "end": {
                          "line": 37,
                          "column": 32
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "thisArg",
                      "range": [
                        1575,
                        1582
                      ],
                      "loc": {
                        "start": {
                          "line": 37,
                          "column": 34
                        },
                        "end": {
                          "line": 37,
                          "column": 41
                        }
                      }
                    }
                  ],
                  "range": [
                    1552,
                    1583
                  ],
                  "loc": {
                    "start": {
                      "line": 37,
                      "column": 11
                    },
                    "end": {
                      "line": 37,
                      "column": 42
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1584,
                      1588
                    ],
                    "loc": {
                      "start": {
                        "line": 37,
                        "column": 43
                      },
                      "end": {
                        "line": 37,
                        "column": 47
                      }
                    }
                  }
                ],
                "range": [
                  1552,
                  1589
                ],
                "loc": {
                  "start": {
                    "line": 37,
                    "column": 11
                  },
                  "end": {
                    "line": 37,
                    "column": 48
                  }
                }
              },
              "range": [
                1545,
                1590
              ],
              "loc": {
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 49
                }
              }
            }
          ],
          "range": [
            1538,
            1593
          ],
          "loc": {
            "start": {
              "line": 36,
              "column": 46
            },
            "end": {
              "line": 38,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1499,
          1593
        ],
        "loc": {
          "start": {
            "line": 36,
            "column": 7
          },
          "end": {
            "line": 38,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\r\n * Emits only the index of the first value emitted by the source Observable that\r\n * meets some condition.\r\n *\r\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\r\n * found value, not the value itself.</span>\r\n *\r\n * <img src=\"./img/findIndex.png\" width=\"100%\">\r\n *\r\n * `findIndex` searches for the first item in the source Observable that matches\r\n * the specified condition embodied by the `predicate`, and returns the\r\n * (zero-based) index of the first occurrence in the source. Unlike\r\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\r\n * an error if a valid value is not found.\r\n *\r\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link first}\r\n * @see {@link take}\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\r\n * A function called with each item to test for condition matching.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of the index of the first item that\r\n * matches the condition.\r\n * @method find\r\n * @owner Observable\r\n ",
            "range": [
              58,
              1490
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 35,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=findIndex.js.map",
            "range": [
              1595,
              1632
            ],
            "loc": {
              "start": {
                "line": 39,
                "column": 0
              },
              "end": {
                "line": 39,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1492,
        1593
      ],
      "loc": {
        "start": {
          "line": 36,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\r\n * Emits only the index of the first value emitted by the source Observable that\r\n * meets some condition.\r\n *\r\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\r\n * found value, not the value itself.</span>\r\n *\r\n * <img src=\"./img/findIndex.png\" width=\"100%\">\r\n *\r\n * `findIndex` searches for the first item in the source Observable that matches\r\n * the specified condition embodied by the `predicate`, and returns the\r\n * (zero-based) index of the first occurrence in the source. Unlike\r\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\r\n * an error if a valid value is not found.\r\n *\r\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link first}\r\n * @see {@link take}\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\r\n * A function called with each item to test for condition matching.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of the index of the first item that\r\n * matches the condition.\r\n * @method find\r\n * @owner Observable\r\n ",
          "range": [
            58,
            1490
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=findIndex.js.map",
          "range": [
            1595,
            1632
          ],
          "loc": {
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1593
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 38,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\r\n * Emits only the index of the first value emitted by the source Observable that\r\n * meets some condition.\r\n *\r\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\r\n * found value, not the value itself.</span>\r\n *\r\n * <img src=\"./img/findIndex.png\" width=\"100%\">\r\n *\r\n * `findIndex` searches for the first item in the source Observable that matches\r\n * the specified condition embodied by the `predicate`, and returns the\r\n * (zero-based) index of the first occurrence in the source. Unlike\r\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\r\n * an error if a valid value is not found.\r\n *\r\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link first}\r\n * @see {@link take}\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\r\n * A function called with each item to test for condition matching.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of the index of the first item that\r\n * matches the condition.\r\n * @method find\r\n * @owner Observable\r\n ",
      "range": [
        58,
        1490
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=findIndex.js.map",
      "range": [
        1595,
        1632
      ],
      "loc": {
        "start": {
          "line": 39,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 37
        }
      }
    }
  ]
}