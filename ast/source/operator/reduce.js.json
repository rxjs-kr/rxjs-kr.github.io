{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrderReduce",
            "range": [
              19,
              36
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 19
              },
              "end": {
                "line": 1,
                "column": 36
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "reduce",
            "range": [
              9,
              15
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 15
              }
            }
          },
          "range": [
            9,
            36
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 36
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          44,
          58
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 44
          },
          "end": {
            "line": 1,
            "column": 58
          }
        }
      },
      "range": [
        0,
        59
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 59
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            61,
            96
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n ",
          "range": [
            98,
            2228
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "reduce",
          "range": [
            2246,
            2252
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 16
            },
            "end": {
              "line": 47,
              "column": 22
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "accumulator",
            "range": [
              2253,
              2264
            ],
            "loc": {
              "start": {
                "line": 47,
                "column": 23
              },
              "end": {
                "line": 47,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "seed",
            "range": [
              2266,
              2270
            ],
            "loc": {
              "start": {
                "line": 47,
                "column": 36
              },
              "end": {
                "line": 47,
                "column": 40
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": ">=",
                "left": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "arguments",
                    "range": [
                      2647,
                      2656
                    ],
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 8
                      },
                      "end": {
                        "line": 53,
                        "column": 17
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "length",
                    "range": [
                      2657,
                      2663
                    ],
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 18
                      },
                      "end": {
                        "line": 53,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    2647,
                    2663
                  ],
                  "loc": {
                    "start": {
                      "line": 53,
                      "column": 8
                    },
                    "end": {
                      "line": 53,
                      "column": 24
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 2,
                  "raw": "2",
                  "range": [
                    2667,
                    2668
                  ],
                  "loc": {
                    "start": {
                      "line": 53,
                      "column": 28
                    },
                    "end": {
                      "line": 53,
                      "column": 29
                    }
                  }
                },
                "range": [
                  2647,
                  2668
                ],
                "loc": {
                  "start": {
                    "line": 53,
                    "column": 8
                  },
                  "end": {
                    "line": 53,
                    "column": 29
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "higherOrderReduce",
                          "range": [
                            2688,
                            2705
                          ],
                          "loc": {
                            "start": {
                              "line": 54,
                              "column": 15
                            },
                            "end": {
                              "line": 54,
                              "column": 32
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "accumulator",
                            "range": [
                              2706,
                              2717
                            ],
                            "loc": {
                              "start": {
                                "line": 54,
                                "column": 33
                              },
                              "end": {
                                "line": 54,
                                "column": 44
                              }
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "seed",
                            "range": [
                              2719,
                              2723
                            ],
                            "loc": {
                              "start": {
                                "line": 54,
                                "column": 46
                              },
                              "end": {
                                "line": 54,
                                "column": 50
                              }
                            }
                          }
                        ],
                        "range": [
                          2688,
                          2724
                        ],
                        "loc": {
                          "start": {
                            "line": 54,
                            "column": 15
                          },
                          "end": {
                            "line": 54,
                            "column": 51
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "ThisExpression",
                          "range": [
                            2725,
                            2729
                          ],
                          "loc": {
                            "start": {
                              "line": 54,
                              "column": 52
                            },
                            "end": {
                              "line": 54,
                              "column": 56
                            }
                          }
                        }
                      ],
                      "range": [
                        2688,
                        2730
                      ],
                      "loc": {
                        "start": {
                          "line": 54,
                          "column": 15
                        },
                        "end": {
                          "line": 54,
                          "column": 57
                        }
                      }
                    },
                    "range": [
                      2681,
                      2731
                    ],
                    "loc": {
                      "start": {
                        "line": 54,
                        "column": 8
                      },
                      "end": {
                        "line": 54,
                        "column": 58
                      }
                    }
                  }
                ],
                "range": [
                  2670,
                  2738
                ],
                "loc": {
                  "start": {
                    "line": 53,
                    "column": 31
                  },
                  "end": {
                    "line": 55,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                2643,
                2738
              ],
              "loc": {
                "start": {
                  "line": 53,
                  "column": 4
                },
                "end": {
                  "line": 55,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Line",
                  "value": " providing a seed of `undefined` *should* be valid and trigger",
                  "range": [
                    2279,
                    2343
                  ],
                  "loc": {
                    "start": {
                      "line": 48,
                      "column": 4
                    },
                    "end": {
                      "line": 48,
                      "column": 68
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " hasSeed! so don't use `seed !== undefined` checks!",
                  "range": [
                    2349,
                    2402
                  ],
                  "loc": {
                    "start": {
                      "line": 49,
                      "column": 4
                    },
                    "end": {
                      "line": 49,
                      "column": 57
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " For this reason, we have to check it here at the original call site",
                  "range": [
                    2408,
                    2478
                  ],
                  "loc": {
                    "start": {
                      "line": 50,
                      "column": 4
                    },
                    "end": {
                      "line": 50,
                      "column": 74
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " otherwise inside Operator/Subscriber we won't know if `undefined`",
                  "range": [
                    2484,
                    2552
                  ],
                  "loc": {
                    "start": {
                      "line": 51,
                      "column": 4
                    },
                    "end": {
                      "line": 51,
                      "column": 72
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " means they didn't provide anything or if they literally provided `undefined`",
                  "range": [
                    2558,
                    2637
                  ],
                  "loc": {
                    "start": {
                      "line": 52,
                      "column": 4
                    },
                    "end": {
                      "line": 52,
                      "column": 83
                    }
                  }
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrderReduce",
                    "range": [
                      2751,
                      2768
                    ],
                    "loc": {
                      "start": {
                        "line": 56,
                        "column": 11
                      },
                      "end": {
                        "line": 56,
                        "column": 28
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "accumulator",
                      "range": [
                        2769,
                        2780
                      ],
                      "loc": {
                        "start": {
                          "line": 56,
                          "column": 29
                        },
                        "end": {
                          "line": 56,
                          "column": 40
                        }
                      }
                    }
                  ],
                  "range": [
                    2751,
                    2781
                  ],
                  "loc": {
                    "start": {
                      "line": 56,
                      "column": 11
                    },
                    "end": {
                      "line": 56,
                      "column": 41
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2782,
                      2786
                    ],
                    "loc": {
                      "start": {
                        "line": 56,
                        "column": 42
                      },
                      "end": {
                        "line": 56,
                        "column": 46
                      }
                    }
                  }
                ],
                "range": [
                  2751,
                  2787
                ],
                "loc": {
                  "start": {
                    "line": 56,
                    "column": 11
                  },
                  "end": {
                    "line": 56,
                    "column": 47
                  }
                }
              },
              "range": [
                2744,
                2788
              ],
              "loc": {
                "start": {
                  "line": 56,
                  "column": 4
                },
                "end": {
                  "line": 56,
                  "column": 48
                }
              }
            }
          ],
          "range": [
            2272,
            2791
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 42
            },
            "end": {
              "line": 57,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2237,
          2791
        ],
        "loc": {
          "start": {
            "line": 47,
            "column": 7
          },
          "end": {
            "line": 57,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              61,
              96
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n ",
            "range": [
              98,
              2228
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=reduce.js.map",
            "range": [
              2793,
              2827
            ],
            "loc": {
              "start": {
                "line": 58,
                "column": 0
              },
              "end": {
                "line": 58,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2230,
        2791
      ],
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 57,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            61,
            96
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n ",
          "range": [
            98,
            2228
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=reduce.js.map",
          "range": [
            2793,
            2827
          ],
          "loc": {
            "start": {
              "line": 58,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2791
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 57,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        61,
        96
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n ",
      "range": [
        98,
        2228
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": " providing a seed of `undefined` *should* be valid and trigger",
      "range": [
        2279,
        2343
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 68
        }
      }
    },
    {
      "type": "Line",
      "value": " hasSeed! so don't use `seed !== undefined` checks!",
      "range": [
        2349,
        2402
      ],
      "loc": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 49,
          "column": 57
        }
      }
    },
    {
      "type": "Line",
      "value": " For this reason, we have to check it here at the original call site",
      "range": [
        2408,
        2478
      ],
      "loc": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 74
        }
      }
    },
    {
      "type": "Line",
      "value": " otherwise inside Operator/Subscriber we won't know if `undefined`",
      "range": [
        2484,
        2552
      ],
      "loc": {
        "start": {
          "line": 51,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 72
        }
      }
    },
    {
      "type": "Line",
      "value": " means they didn't provide anything or if they literally provided `undefined`",
      "range": [
        2558,
        2637
      ],
      "loc": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 83
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=reduce.js.map",
      "range": [
        2793,
        2827
      ],
      "loc": {
        "start": {
          "line": 58,
          "column": 0
        },
        "end": {
          "line": 58,
          "column": 34
        }
      }
    }
  ]
}