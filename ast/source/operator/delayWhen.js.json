{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              22,
              33
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 22
              },
              "end": {
                "line": 1,
                "column": 33
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "delayWhen",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            9,
            33
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 33
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          41,
          55
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 41
          },
          "end": {
            "line": 1,
            "column": 55
          }
        }
      },
      "range": [
        0,
        56
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 56
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\r\n * Delays the emission of items from the source Observable by a given time span\r\n * determined by the emissions of another Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\r\n * delay duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\r\n *\r\n * `delayWhen` time shifts each emitted value from the source Observable by a\r\n * time span determined by another Observable. When the source emits a value,\r\n * the `delayDurationSelector` function is called with the source value as\r\n * argument, and should return an Observable, called the \"duration\" Observable.\r\n * The source value is emitted on the output Observable only when the duration\r\n * Observable emits a value or completes.\r\n *\r\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\r\n * is an Observable. When `subscriptionDelay` emits its first value or\r\n * completes, the source Observable is subscribed to and starts behaving like\r\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\r\n * `delayWhen` will subscribe to the source Observable as soon as the output\r\n * Observable is subscribed.\r\n *\r\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var delayedClicks = clicks.delayWhen(event =>\r\n *   Rx.Observable.interval(Math.random() * 5000)\r\n * );\r\n * delayedClicks.subscribe(x => console.log(x));\r\n *\r\n * @see {@link debounce}\r\n * @see {@link delay}\r\n *\r\n * @param {function(value: T): Observable} delayDurationSelector A function that\r\n * returns an Observable for each value emitted by the source Observable, which\r\n * is then used to delay the emission of that item on the output Observable\r\n * until the Observable returned from this function emits a value.\r\n * @param {Observable} subscriptionDelay An Observable that triggers the\r\n * subscription to the source Observable once it emits any value.\r\n * @return {Observable} An Observable that delays the emissions of the source\r\n * Observable by an amount of time specified by the Observable returned by\r\n * `delayDurationSelector`.\r\n * @method delayWhen\r\n * @owner Observable\r\n ",
          "range": [
            58,
            2324
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "delayWhen",
          "range": [
            2342,
            2351
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 16
            },
            "end": {
              "line": 47,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "delayDurationSelector",
            "range": [
              2352,
              2373
            ],
            "loc": {
              "start": {
                "line": 47,
                "column": 26
              },
              "end": {
                "line": 47,
                "column": 47
              }
            }
          },
          {
            "type": "Identifier",
            "name": "subscriptionDelay",
            "range": [
              2375,
              2392
            ],
            "loc": {
              "start": {
                "line": 47,
                "column": 49
              },
              "end": {
                "line": 47,
                "column": 66
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      2408,
                      2419
                    ],
                    "loc": {
                      "start": {
                        "line": 48,
                        "column": 11
                      },
                      "end": {
                        "line": 48,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "delayDurationSelector",
                      "range": [
                        2420,
                        2441
                      ],
                      "loc": {
                        "start": {
                          "line": 48,
                          "column": 23
                        },
                        "end": {
                          "line": 48,
                          "column": 44
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "subscriptionDelay",
                      "range": [
                        2443,
                        2460
                      ],
                      "loc": {
                        "start": {
                          "line": 48,
                          "column": 46
                        },
                        "end": {
                          "line": 48,
                          "column": 63
                        }
                      }
                    }
                  ],
                  "range": [
                    2408,
                    2461
                  ],
                  "loc": {
                    "start": {
                      "line": 48,
                      "column": 11
                    },
                    "end": {
                      "line": 48,
                      "column": 64
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2462,
                      2466
                    ],
                    "loc": {
                      "start": {
                        "line": 48,
                        "column": 65
                      },
                      "end": {
                        "line": 48,
                        "column": 69
                      }
                    }
                  }
                ],
                "range": [
                  2408,
                  2467
                ],
                "loc": {
                  "start": {
                    "line": 48,
                    "column": 11
                  },
                  "end": {
                    "line": 48,
                    "column": 70
                  }
                }
              },
              "range": [
                2401,
                2468
              ],
              "loc": {
                "start": {
                  "line": 48,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 71
                }
              }
            }
          ],
          "range": [
            2394,
            2471
          ],
          "loc": {
            "start": {
              "line": 47,
              "column": 68
            },
            "end": {
              "line": 49,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2333,
          2471
        ],
        "loc": {
          "start": {
            "line": 47,
            "column": 7
          },
          "end": {
            "line": 49,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\r\n * Delays the emission of items from the source Observable by a given time span\r\n * determined by the emissions of another Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\r\n * delay duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\r\n *\r\n * `delayWhen` time shifts each emitted value from the source Observable by a\r\n * time span determined by another Observable. When the source emits a value,\r\n * the `delayDurationSelector` function is called with the source value as\r\n * argument, and should return an Observable, called the \"duration\" Observable.\r\n * The source value is emitted on the output Observable only when the duration\r\n * Observable emits a value or completes.\r\n *\r\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\r\n * is an Observable. When `subscriptionDelay` emits its first value or\r\n * completes, the source Observable is subscribed to and starts behaving like\r\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\r\n * `delayWhen` will subscribe to the source Observable as soon as the output\r\n * Observable is subscribed.\r\n *\r\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var delayedClicks = clicks.delayWhen(event =>\r\n *   Rx.Observable.interval(Math.random() * 5000)\r\n * );\r\n * delayedClicks.subscribe(x => console.log(x));\r\n *\r\n * @see {@link debounce}\r\n * @see {@link delay}\r\n *\r\n * @param {function(value: T): Observable} delayDurationSelector A function that\r\n * returns an Observable for each value emitted by the source Observable, which\r\n * is then used to delay the emission of that item on the output Observable\r\n * until the Observable returned from this function emits a value.\r\n * @param {Observable} subscriptionDelay An Observable that triggers the\r\n * subscription to the source Observable once it emits any value.\r\n * @return {Observable} An Observable that delays the emissions of the source\r\n * Observable by an amount of time specified by the Observable returned by\r\n * `delayDurationSelector`.\r\n * @method delayWhen\r\n * @owner Observable\r\n ",
            "range": [
              58,
              2324
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 46,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=delayWhen.js.map",
            "range": [
              2473,
              2510
            ],
            "loc": {
              "start": {
                "line": 50,
                "column": 0
              },
              "end": {
                "line": 50,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2326,
        2471
      ],
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 49,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\r\n * Delays the emission of items from the source Observable by a given time span\r\n * determined by the emissions of another Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\r\n * delay duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\r\n *\r\n * `delayWhen` time shifts each emitted value from the source Observable by a\r\n * time span determined by another Observable. When the source emits a value,\r\n * the `delayDurationSelector` function is called with the source value as\r\n * argument, and should return an Observable, called the \"duration\" Observable.\r\n * The source value is emitted on the output Observable only when the duration\r\n * Observable emits a value or completes.\r\n *\r\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\r\n * is an Observable. When `subscriptionDelay` emits its first value or\r\n * completes, the source Observable is subscribed to and starts behaving like\r\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\r\n * `delayWhen` will subscribe to the source Observable as soon as the output\r\n * Observable is subscribed.\r\n *\r\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var delayedClicks = clicks.delayWhen(event =>\r\n *   Rx.Observable.interval(Math.random() * 5000)\r\n * );\r\n * delayedClicks.subscribe(x => console.log(x));\r\n *\r\n * @see {@link debounce}\r\n * @see {@link delay}\r\n *\r\n * @param {function(value: T): Observable} delayDurationSelector A function that\r\n * returns an Observable for each value emitted by the source Observable, which\r\n * is then used to delay the emission of that item on the output Observable\r\n * until the Observable returned from this function emits a value.\r\n * @param {Observable} subscriptionDelay An Observable that triggers the\r\n * subscription to the source Observable once it emits any value.\r\n * @return {Observable} An Observable that delays the emissions of the source\r\n * Observable by an amount of time specified by the Observable returned by\r\n * `delayDurationSelector`.\r\n * @method delayWhen\r\n * @owner Observable\r\n ",
          "range": [
            58,
            2324
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=delayWhen.js.map",
          "range": [
            2473,
            2510
          ],
          "loc": {
            "start": {
              "line": 50,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2471
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 49,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\r\n * Delays the emission of items from the source Observable by a given time span\r\n * determined by the emissions of another Observable.\r\n *\r\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\r\n * delay duration is determined by a second Observable.</span>\r\n *\r\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\r\n *\r\n * `delayWhen` time shifts each emitted value from the source Observable by a\r\n * time span determined by another Observable. When the source emits a value,\r\n * the `delayDurationSelector` function is called with the source value as\r\n * argument, and should return an Observable, called the \"duration\" Observable.\r\n * The source value is emitted on the output Observable only when the duration\r\n * Observable emits a value or completes.\r\n *\r\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\r\n * is an Observable. When `subscriptionDelay` emits its first value or\r\n * completes, the source Observable is subscribed to and starts behaving like\r\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\r\n * `delayWhen` will subscribe to the source Observable as soon as the output\r\n * Observable is subscribed.\r\n *\r\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var delayedClicks = clicks.delayWhen(event =>\r\n *   Rx.Observable.interval(Math.random() * 5000)\r\n * );\r\n * delayedClicks.subscribe(x => console.log(x));\r\n *\r\n * @see {@link debounce}\r\n * @see {@link delay}\r\n *\r\n * @param {function(value: T): Observable} delayDurationSelector A function that\r\n * returns an Observable for each value emitted by the source Observable, which\r\n * is then used to delay the emission of that item on the output Observable\r\n * until the Observable returned from this function emits a value.\r\n * @param {Observable} subscriptionDelay An Observable that triggers the\r\n * subscription to the source Observable once it emits any value.\r\n * @return {Observable} An Observable that delays the emissions of the source\r\n * Observable by an amount of time specified by the Observable returned by\r\n * `delayDurationSelector`.\r\n * @method delayWhen\r\n * @owner Observable\r\n ",
      "range": [
        58,
        2324
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=delayWhen.js.map",
      "range": [
        2473,
        2510
      ],
      "loc": {
        "start": {
          "line": 50,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 37
        }
      }
    }
  ]
}