{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              22,
              33
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 22
              },
              "end": {
                "line": 1,
                "column": 33
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "observeOn",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            9,
            33
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 33
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          41,
          55
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 41
          },
          "end": {
            "line": 1,
            "column": 55
          }
        }
      },
      "range": [
        0,
        56
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 56
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\r\n *\r\n * Re-emits all notifications from source Observable with specified scheduler.\r\n *\r\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\r\n *\r\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\r\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\r\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\r\n *\r\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\r\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\r\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\r\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\r\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\r\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\r\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\r\n * little bit more, to ensure that they are emitted at expected moments.\r\n *\r\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\r\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\r\n * will delay all notifications - including error notifications - while `delay` will pass through error\r\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\r\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\r\n * for notification emissions in general.\r\n *\r\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\r\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\r\n *                                               // with async scheduler by default...\r\n *\r\n * intervals\r\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\r\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\r\n *   someDiv.style.height = val + 'px';\r\n * });\r\n *\r\n * @see {@link delay}\r\n *\r\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\r\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\r\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\r\n * but with provided scheduler.\r\n *\r\n * @method observeOn\r\n * @owner Observable\r\n ",
          "range": [
            58,
            3044
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "observeOn",
          "range": [
            3062,
            3071
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 16
            },
            "end": {
              "line": 48,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "scheduler",
            "range": [
              3072,
              3081
            ],
            "loc": {
              "start": {
                "line": 48,
                "column": 26
              },
              "end": {
                "line": 48,
                "column": 35
              }
            }
          },
          {
            "type": "AssignmentPattern",
            "left": {
              "type": "Identifier",
              "name": "delay",
              "range": [
                3083,
                3088
              ],
              "loc": {
                "start": {
                  "line": 48,
                  "column": 37
                },
                "end": {
                  "line": 48,
                  "column": 42
                }
              }
            },
            "right": {
              "type": "Literal",
              "value": 0,
              "raw": "0",
              "range": [
                3091,
                3092
              ],
              "loc": {
                "start": {
                  "line": 48,
                  "column": 45
                },
                "end": {
                  "line": 48,
                  "column": 46
                }
              }
            },
            "range": [
              3083,
              3092
            ],
            "loc": {
              "start": {
                "line": 48,
                "column": 37
              },
              "end": {
                "line": 48,
                "column": 46
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      3108,
                      3119
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 11
                      },
                      "end": {
                        "line": 49,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "scheduler",
                      "range": [
                        3120,
                        3129
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 23
                        },
                        "end": {
                          "line": 49,
                          "column": 32
                        }
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "delay",
                      "range": [
                        3131,
                        3136
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 34
                        },
                        "end": {
                          "line": 49,
                          "column": 39
                        }
                      }
                    }
                  ],
                  "range": [
                    3108,
                    3137
                  ],
                  "loc": {
                    "start": {
                      "line": 49,
                      "column": 11
                    },
                    "end": {
                      "line": 49,
                      "column": 40
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      3138,
                      3142
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 41
                      },
                      "end": {
                        "line": 49,
                        "column": 45
                      }
                    }
                  }
                ],
                "range": [
                  3108,
                  3143
                ],
                "loc": {
                  "start": {
                    "line": 49,
                    "column": 11
                  },
                  "end": {
                    "line": 49,
                    "column": 46
                  }
                }
              },
              "range": [
                3101,
                3144
              ],
              "loc": {
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 47
                }
              }
            }
          ],
          "range": [
            3094,
            3147
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 48
            },
            "end": {
              "line": 50,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          3053,
          3147
        ],
        "loc": {
          "start": {
            "line": 48,
            "column": 7
          },
          "end": {
            "line": 50,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\r\n *\r\n * Re-emits all notifications from source Observable with specified scheduler.\r\n *\r\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\r\n *\r\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\r\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\r\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\r\n *\r\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\r\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\r\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\r\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\r\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\r\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\r\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\r\n * little bit more, to ensure that they are emitted at expected moments.\r\n *\r\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\r\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\r\n * will delay all notifications - including error notifications - while `delay` will pass through error\r\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\r\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\r\n * for notification emissions in general.\r\n *\r\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\r\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\r\n *                                               // with async scheduler by default...\r\n *\r\n * intervals\r\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\r\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\r\n *   someDiv.style.height = val + 'px';\r\n * });\r\n *\r\n * @see {@link delay}\r\n *\r\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\r\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\r\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\r\n * but with provided scheduler.\r\n *\r\n * @method observeOn\r\n * @owner Observable\r\n ",
            "range": [
              58,
              3044
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 47,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=observeOn.js.map",
            "range": [
              3149,
              3186
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        3046,
        3147
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\r\n *\r\n * Re-emits all notifications from source Observable with specified scheduler.\r\n *\r\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\r\n *\r\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\r\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\r\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\r\n *\r\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\r\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\r\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\r\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\r\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\r\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\r\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\r\n * little bit more, to ensure that they are emitted at expected moments.\r\n *\r\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\r\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\r\n * will delay all notifications - including error notifications - while `delay` will pass through error\r\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\r\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\r\n * for notification emissions in general.\r\n *\r\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\r\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\r\n *                                               // with async scheduler by default...\r\n *\r\n * intervals\r\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\r\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\r\n *   someDiv.style.height = val + 'px';\r\n * });\r\n *\r\n * @see {@link delay}\r\n *\r\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\r\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\r\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\r\n * but with provided scheduler.\r\n *\r\n * @method observeOn\r\n * @owner Observable\r\n ",
          "range": [
            58,
            3044
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=observeOn.js.map",
          "range": [
            3149,
            3186
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    3147
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 50,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\r\n *\r\n * Re-emits all notifications from source Observable with specified scheduler.\r\n *\r\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\r\n *\r\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\r\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\r\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\r\n *\r\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\r\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\r\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\r\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\r\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\r\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\r\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\r\n * little bit more, to ensure that they are emitted at expected moments.\r\n *\r\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\r\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\r\n * will delay all notifications - including error notifications - while `delay` will pass through error\r\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\r\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\r\n * for notification emissions in general.\r\n *\r\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\r\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\r\n *                                               // with async scheduler by default...\r\n *\r\n * intervals\r\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\r\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\r\n *   someDiv.style.height = val + 'px';\r\n * });\r\n *\r\n * @see {@link delay}\r\n *\r\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\r\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\r\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\r\n * but with provided scheduler.\r\n *\r\n * @method observeOn\r\n * @owner Observable\r\n ",
      "range": [
        58,
        3044
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=observeOn.js.map",
      "range": [
        3149,
        3186
      ],
      "loc": {
        "start": {
          "line": 51,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 37
        }
      }
    }
  ]
}