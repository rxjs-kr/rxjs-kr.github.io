{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "higherOrder",
            "range": [
              19,
              30
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 19
              },
              "end": {
                "line": 1,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "concat",
            "range": [
              9,
              15
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 15
              }
            }
          },
          "range": [
            9,
            30
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operators",
        "raw": "'../operators'",
        "range": [
          38,
          52
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 38
          },
          "end": {
            "line": 1,
            "column": 52
          }
        }
      },
      "range": [
        0,
        53
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 53
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            55,
            90
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Creates an output Observable which sequentially emits all values from every\r\n * given input Observable after the current Observable.\r\n *\r\n * <span class=\"informal\">Concatenates multiple Observables together by\r\n * sequentially emitting their values, one Observable after the other.</span>\r\n *\r\n * <img src=\"./img/concat.png\" width=\"100%\">\r\n *\r\n * Joins this Observable with multiple other Observables by subscribing to them\r\n * one at a time, starting with the source, and merging their results into the\r\n * output Observable. Will wait for each Observable to complete before moving\r\n * on to the next.\r\n *\r\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\r\n * var timer = Rx.Observable.interval(1000).take(4);\r\n * var sequence = Rx.Observable.range(1, 10);\r\n * var result = timer.concat(sequence);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in:\r\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\r\n *\r\n * @example <caption>Concatenate 3 Observables</caption>\r\n * var timer1 = Rx.Observable.interval(1000).take(10);\r\n * var timer2 = Rx.Observable.interval(2000).take(6);\r\n * var timer3 = Rx.Observable.interval(500).take(10);\r\n * var result = timer1.concat(timer2, timer3);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in the following:\r\n * // (Prints to console sequentially)\r\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\r\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\r\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\r\n *\r\n * @see {@link concatAll}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n *\r\n * @param {ObservableInput} other An input Observable to concatenate after the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\r\n * Observable subscription on.\r\n * @return {Observable} All values of each passed Observable merged into a\r\n * single Observable, in order, in serial fashion.\r\n * @method concat\r\n * @owner Observable\r\n ",
          "range": [
            92,
            2176
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concat",
          "range": [
            2194,
            2200
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 16
            },
            "end": {
              "line": 52,
              "column": 22
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                2204,
                2215
              ],
              "loc": {
                "start": {
                  "line": 52,
                  "column": 26
                },
                "end": {
                  "line": 52,
                  "column": 37
                }
              }
            },
            "range": [
              2201,
              2215
            ],
            "loc": {
              "start": {
                "line": 52,
                "column": 23
              },
              "end": {
                "line": 52,
                "column": 37
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "higherOrder",
                    "range": [
                      2231,
                      2242
                    ],
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 11
                      },
                      "end": {
                        "line": 53,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "SpreadElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          2246,
                          2257
                        ],
                        "loc": {
                          "start": {
                            "line": 53,
                            "column": 26
                          },
                          "end": {
                            "line": 53,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        2243,
                        2257
                      ],
                      "loc": {
                        "start": {
                          "line": 53,
                          "column": 23
                        },
                        "end": {
                          "line": 53,
                          "column": 37
                        }
                      }
                    }
                  ],
                  "range": [
                    2231,
                    2258
                  ],
                  "loc": {
                    "start": {
                      "line": 53,
                      "column": 11
                    },
                    "end": {
                      "line": 53,
                      "column": 38
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      2259,
                      2263
                    ],
                    "loc": {
                      "start": {
                        "line": 53,
                        "column": 39
                      },
                      "end": {
                        "line": 53,
                        "column": 43
                      }
                    }
                  }
                ],
                "range": [
                  2231,
                  2264
                ],
                "loc": {
                  "start": {
                    "line": 53,
                    "column": 11
                  },
                  "end": {
                    "line": 53,
                    "column": 44
                  }
                }
              },
              "range": [
                2224,
                2265
              ],
              "loc": {
                "start": {
                  "line": 53,
                  "column": 4
                },
                "end": {
                  "line": 53,
                  "column": 45
                }
              }
            }
          ],
          "range": [
            2217,
            2268
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 39
            },
            "end": {
              "line": 54,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2185,
          2268
        ],
        "loc": {
          "start": {
            "line": 52,
            "column": 7
          },
          "end": {
            "line": 54,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              55,
              90
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\r\n * Creates an output Observable which sequentially emits all values from every\r\n * given input Observable after the current Observable.\r\n *\r\n * <span class=\"informal\">Concatenates multiple Observables together by\r\n * sequentially emitting their values, one Observable after the other.</span>\r\n *\r\n * <img src=\"./img/concat.png\" width=\"100%\">\r\n *\r\n * Joins this Observable with multiple other Observables by subscribing to them\r\n * one at a time, starting with the source, and merging their results into the\r\n * output Observable. Will wait for each Observable to complete before moving\r\n * on to the next.\r\n *\r\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\r\n * var timer = Rx.Observable.interval(1000).take(4);\r\n * var sequence = Rx.Observable.range(1, 10);\r\n * var result = timer.concat(sequence);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in:\r\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\r\n *\r\n * @example <caption>Concatenate 3 Observables</caption>\r\n * var timer1 = Rx.Observable.interval(1000).take(10);\r\n * var timer2 = Rx.Observable.interval(2000).take(6);\r\n * var timer3 = Rx.Observable.interval(500).take(10);\r\n * var result = timer1.concat(timer2, timer3);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in the following:\r\n * // (Prints to console sequentially)\r\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\r\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\r\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\r\n *\r\n * @see {@link concatAll}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n *\r\n * @param {ObservableInput} other An input Observable to concatenate after the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\r\n * Observable subscription on.\r\n * @return {Observable} All values of each passed Observable merged into a\r\n * single Observable, in order, in serial fashion.\r\n * @method concat\r\n * @owner Observable\r\n ",
            "range": [
              92,
              2176
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concat.js.map",
            "range": [
              2270,
              2304
            ],
            "loc": {
              "start": {
                "line": 55,
                "column": 0
              },
              "end": {
                "line": 55,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2178,
        2268
      ],
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 54,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            55,
            90
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Creates an output Observable which sequentially emits all values from every\r\n * given input Observable after the current Observable.\r\n *\r\n * <span class=\"informal\">Concatenates multiple Observables together by\r\n * sequentially emitting their values, one Observable after the other.</span>\r\n *\r\n * <img src=\"./img/concat.png\" width=\"100%\">\r\n *\r\n * Joins this Observable with multiple other Observables by subscribing to them\r\n * one at a time, starting with the source, and merging their results into the\r\n * output Observable. Will wait for each Observable to complete before moving\r\n * on to the next.\r\n *\r\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\r\n * var timer = Rx.Observable.interval(1000).take(4);\r\n * var sequence = Rx.Observable.range(1, 10);\r\n * var result = timer.concat(sequence);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in:\r\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\r\n *\r\n * @example <caption>Concatenate 3 Observables</caption>\r\n * var timer1 = Rx.Observable.interval(1000).take(10);\r\n * var timer2 = Rx.Observable.interval(2000).take(6);\r\n * var timer3 = Rx.Observable.interval(500).take(10);\r\n * var result = timer1.concat(timer2, timer3);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in the following:\r\n * // (Prints to console sequentially)\r\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\r\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\r\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\r\n *\r\n * @see {@link concatAll}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n *\r\n * @param {ObservableInput} other An input Observable to concatenate after the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\r\n * Observable subscription on.\r\n * @return {Observable} All values of each passed Observable merged into a\r\n * single Observable, in order, in serial fashion.\r\n * @method concat\r\n * @owner Observable\r\n ",
          "range": [
            92,
            2176
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concat.js.map",
          "range": [
            2270,
            2304
          ],
          "loc": {
            "start": {
              "line": 55,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2268
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 54,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        55,
        90
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\r\n * Creates an output Observable which sequentially emits all values from every\r\n * given input Observable after the current Observable.\r\n *\r\n * <span class=\"informal\">Concatenates multiple Observables together by\r\n * sequentially emitting their values, one Observable after the other.</span>\r\n *\r\n * <img src=\"./img/concat.png\" width=\"100%\">\r\n *\r\n * Joins this Observable with multiple other Observables by subscribing to them\r\n * one at a time, starting with the source, and merging their results into the\r\n * output Observable. Will wait for each Observable to complete before moving\r\n * on to the next.\r\n *\r\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\r\n * var timer = Rx.Observable.interval(1000).take(4);\r\n * var sequence = Rx.Observable.range(1, 10);\r\n * var result = timer.concat(sequence);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in:\r\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\r\n *\r\n * @example <caption>Concatenate 3 Observables</caption>\r\n * var timer1 = Rx.Observable.interval(1000).take(10);\r\n * var timer2 = Rx.Observable.interval(2000).take(6);\r\n * var timer3 = Rx.Observable.interval(500).take(10);\r\n * var result = timer1.concat(timer2, timer3);\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // results in the following:\r\n * // (Prints to console sequentially)\r\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\r\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\r\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\r\n *\r\n * @see {@link concatAll}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n *\r\n * @param {ObservableInput} other An input Observable to concatenate after the source\r\n * Observable. More than one input Observables may be given as argument.\r\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\r\n * Observable subscription on.\r\n * @return {Observable} All values of each passed Observable merged into a\r\n * single Observable, in order, in serial fashion.\r\n * @method concat\r\n * @owner Observable\r\n ",
      "range": [
        92,
        2176
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concat.js.map",
      "range": [
        2270,
        2304
      ],
      "loc": {
        "start": {
          "line": 55,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 34
        }
      }
    }
  ]
}