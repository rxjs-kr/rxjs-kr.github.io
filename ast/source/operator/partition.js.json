{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "not",
            "range": [
              9,
              12
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 12
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "not",
            "range": [
              9,
              12
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 12
              }
            }
          },
          "range": [
            9,
            12
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 12
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/not",
        "raw": "'../util/not'",
        "range": [
          20,
          33
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 20
          },
          "end": {
            "line": 1,
            "column": 33
          }
        }
      },
      "range": [
        0,
        34
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 34
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "filter",
            "range": [
              45,
              51
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 15
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "filter",
            "range": [
              45,
              51
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 15
              }
            }
          },
          "range": [
            45,
            51
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 15
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./filter",
        "raw": "'./filter'",
        "range": [
          59,
          69
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 23
          },
          "end": {
            "line": 2,
            "column": 33
          }
        }
      },
      "range": [
        36,
        70
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 34
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * <img src=\"./img/partition.png\" width=\"100%\">\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\r\n * var clicksOnDivs = parts[0];\r\n * var clicksElsewhere = parts[1];\r\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\r\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted on the first Observable in the returned array, if\r\n * `false` the value is emitted on the second Observable in the array. The\r\n * `index` parameter is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\r\n * with values that passed the predicate, and another with values that did not\r\n * pass the predicate.\r\n * @method partition\r\n * @owner Observable\r\n ",
          "range": [
            72,
            2217
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "partition",
          "range": [
            2235,
            2244
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 16
            },
            "end": {
              "line": 44,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "predicate",
            "range": [
              2245,
              2254
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 26
              },
              "end": {
                "line": 44,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "thisArg",
            "range": [
              2256,
              2263
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 37
              },
              "end": {
                "line": 44,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "filter",
                        "range": [
                          2290,
                          2296
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 8
                          },
                          "end": {
                            "line": 46,
                            "column": 14
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call",
                        "range": [
                          2297,
                          2301
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 15
                          },
                          "end": {
                            "line": 46,
                            "column": 19
                          }
                        }
                      },
                      "range": [
                        2290,
                        2301
                      ],
                      "loc": {
                        "start": {
                          "line": 46,
                          "column": 8
                        },
                        "end": {
                          "line": 46,
                          "column": 19
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          2302,
                          2306
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 20
                          },
                          "end": {
                            "line": 46,
                            "column": 24
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "predicate",
                        "range": [
                          2308,
                          2317
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 26
                          },
                          "end": {
                            "line": 46,
                            "column": 35
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "thisArg",
                        "range": [
                          2319,
                          2326
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 37
                          },
                          "end": {
                            "line": 46,
                            "column": 44
                          }
                        }
                      }
                    ],
                    "range": [
                      2290,
                      2327
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 8
                      },
                      "end": {
                        "line": 46,
                        "column": 45
                      }
                    }
                  },
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "filter",
                        "range": [
                          2338,
                          2344
                        ],
                        "loc": {
                          "start": {
                            "line": 47,
                            "column": 8
                          },
                          "end": {
                            "line": 47,
                            "column": 14
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call",
                        "range": [
                          2345,
                          2349
                        ],
                        "loc": {
                          "start": {
                            "line": 47,
                            "column": 15
                          },
                          "end": {
                            "line": 47,
                            "column": 19
                          }
                        }
                      },
                      "range": [
                        2338,
                        2349
                      ],
                      "loc": {
                        "start": {
                          "line": 47,
                          "column": 8
                        },
                        "end": {
                          "line": 47,
                          "column": 19
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          2350,
                          2354
                        ],
                        "loc": {
                          "start": {
                            "line": 47,
                            "column": 20
                          },
                          "end": {
                            "line": 47,
                            "column": 24
                          }
                        }
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "not",
                          "range": [
                            2356,
                            2359
                          ],
                          "loc": {
                            "start": {
                              "line": 47,
                              "column": 26
                            },
                            "end": {
                              "line": 47,
                              "column": 29
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "predicate",
                            "range": [
                              2360,
                              2369
                            ],
                            "loc": {
                              "start": {
                                "line": 47,
                                "column": 30
                              },
                              "end": {
                                "line": 47,
                                "column": 39
                              }
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "thisArg",
                            "range": [
                              2371,
                              2378
                            ],
                            "loc": {
                              "start": {
                                "line": 47,
                                "column": 41
                              },
                              "end": {
                                "line": 47,
                                "column": 48
                              }
                            }
                          }
                        ],
                        "range": [
                          2356,
                          2379
                        ],
                        "loc": {
                          "start": {
                            "line": 47,
                            "column": 26
                          },
                          "end": {
                            "line": 47,
                            "column": 49
                          }
                        }
                      }
                    ],
                    "range": [
                      2338,
                      2380
                    ],
                    "loc": {
                      "start": {
                        "line": 47,
                        "column": 8
                      },
                      "end": {
                        "line": 47,
                        "column": 50
                      }
                    }
                  }
                ],
                "range": [
                  2279,
                  2387
                ],
                "loc": {
                  "start": {
                    "line": 45,
                    "column": 11
                  },
                  "end": {
                    "line": 48,
                    "column": 5
                  }
                }
              },
              "range": [
                2272,
                2388
              ],
              "loc": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 6
                }
              }
            }
          ],
          "range": [
            2265,
            2391
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 46
            },
            "end": {
              "line": 49,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          2226,
          2391
        ],
        "loc": {
          "start": {
            "line": 44,
            "column": 7
          },
          "end": {
            "line": 49,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * <img src=\"./img/partition.png\" width=\"100%\">\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\r\n * var clicksOnDivs = parts[0];\r\n * var clicksElsewhere = parts[1];\r\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\r\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted on the first Observable in the returned array, if\r\n * `false` the value is emitted on the second Observable in the array. The\r\n * `index` parameter is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\r\n * with values that passed the predicate, and another with values that did not\r\n * pass the predicate.\r\n * @method partition\r\n * @owner Observable\r\n ",
            "range": [
              72,
              2217
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 43,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=partition.js.map",
            "range": [
              2393,
              2430
            ],
            "loc": {
              "start": {
                "line": 50,
                "column": 0
              },
              "end": {
                "line": 50,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        2219,
        2391
      ],
      "loc": {
        "start": {
          "line": 44,
          "column": 0
        },
        "end": {
          "line": 49,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * <img src=\"./img/partition.png\" width=\"100%\">\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\r\n * var clicksOnDivs = parts[0];\r\n * var clicksElsewhere = parts[1];\r\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\r\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted on the first Observable in the returned array, if\r\n * `false` the value is emitted on the second Observable in the array. The\r\n * `index` parameter is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\r\n * with values that passed the predicate, and another with values that did not\r\n * pass the predicate.\r\n * @method partition\r\n * @owner Observable\r\n ",
          "range": [
            72,
            2217
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=partition.js.map",
          "range": [
            2393,
            2430
          ],
          "loc": {
            "start": {
              "line": 50,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    2391
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 49,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * <img src=\"./img/partition.png\" width=\"100%\">\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\r\n * var clicksOnDivs = parts[0];\r\n * var clicksElsewhere = parts[1];\r\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\r\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted on the first Observable in the returned array, if\r\n * `false` the value is emitted on the second Observable in the array. The\r\n * `index` parameter is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\r\n * with values that passed the predicate, and another with values that did not\r\n * pass the predicate.\r\n * @method partition\r\n * @owner Observable\r\n ",
      "range": [
        72,
        2217
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 43,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=partition.js.map",
      "range": [
        2393,
        2430
      ],
      "loc": {
        "start": {
          "line": 50,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 37
        }
      }
    }
  ]
}