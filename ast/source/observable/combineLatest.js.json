{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          28,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isArray",
            "range": [
              61,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isArray",
            "range": [
              61,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "range": [
            61,
            68
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 16
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isArray",
        "raw": "'../util/isArray'",
        "range": [
          76,
          93
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 24
          },
          "end": {
            "line": 2,
            "column": 41
          }
        }
      },
      "range": [
        52,
        94
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 42
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              105,
              120
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              105,
              120
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "range": [
            105,
            120
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./ArrayObservable",
        "raw": "'./ArrayObservable'",
        "range": [
          128,
          147
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 32
          },
          "end": {
            "line": 3,
            "column": 51
          }
        }
      },
      "range": [
        96,
        148
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 52
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              159,
              180
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              159,
              180
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 30
              }
            }
          },
          "range": [
            159,
            180
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operator/combineLatest",
        "raw": "'../operator/combineLatest'",
        "range": [
          188,
          215
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 38
          },
          "end": {
            "line": 4,
            "column": 65
          }
        }
      },
      "range": [
        150,
        216
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 66
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            218,
            253
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Combines multiple Observables to create an Observable whose values are\r\n * calculated from the latest values of each of its input Observables.\r\n *\r\n * <span class=\"informal\">Whenever any input Observable emits a value, it\r\n * computes a formula using the latest values from all the inputs, then emits\r\n * the output of that formula.</span>\r\n *\r\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\r\n *\r\n * `combineLatest` combines the values from all the Observables passed as\r\n * arguments. This is done by subscribing to each Observable in order and,\r\n * whenever any Observable emits, collecting an array of the most recent\r\n * values from each Observable. So if you pass `n` Observables to operator,\r\n * returned Observable will always emit an array of `n` values, in order\r\n * corresponding to order of passed Observables (value from the first Observable\r\n * on the first place and so on).\r\n *\r\n * Static version of `combineLatest` accepts either an array of Observables\r\n * or each Observable can be put directly as an argument. Note that array of\r\n * Observables is good choice, if you don't know beforehand how many Observables\r\n * you will combine. Passing empty array will result in Observable that\r\n * completes immediately.\r\n *\r\n * To ensure output array has always the same length, `combineLatest` will\r\n * actually wait for all input Observables to emit at least once,\r\n * before it starts emitting results. This means if some Observable emits\r\n * values before other Observables started emitting, all that values but last\r\n * will be lost. On the other hand, is some Observable does not emit value but\r\n * completes, resulting Observable will complete at the same moment without\r\n * emitting anything, since it will be now impossible to include value from\r\n * completed Observable in resulting array. Also, if some input Observable does\r\n * not emit any value and never completes, `combineLatest` will also never emit\r\n * and never complete, since, again, it will wait for all streams to emit some\r\n * value.\r\n *\r\n * If at least one Observable was passed to `combineLatest` and all passed Observables\r\n * emitted something, resulting Observable will complete when all combined\r\n * streams complete. So even if some Observable completes, result of\r\n * `combineLatest` will still emit values when other Observables do. In case\r\n * of completed Observable, its value from now on will always be the last\r\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\r\n * will error immediately as well, and all other Observables will be unsubscribed.\r\n *\r\n * `combineLatest` accepts as optional parameter `project` function, which takes\r\n * as arguments all values that would normally be emitted by resulting Observable.\r\n * `project` can return any kind of value, which will be then emitted by Observable\r\n * instead of default array. Note that `project` does not take as argument that array\r\n * of values, but values themselves. That means default `project` can be imagined\r\n * as function that takes all its arguments and puts them into an array.\r\n *\r\n *\r\n * @example <caption>Combine two timer Observables</caption>\r\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\r\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\r\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\r\n * combinedTimers.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0] after 0.5s\r\n * // [1, 0] after 1s\r\n * // [1, 1] after 1.5s\r\n * // [2, 1] after 2s\r\n *\r\n *\r\n * @example <caption>Combine an array of Observables</caption>\r\n * const observables = [1, 5, 10].map(\r\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\r\n * );\r\n * const combined = Rx.Observable.combineLatest(observables);\r\n * combined.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0, 0] immediately\r\n * // [1, 0, 0] after 1s\r\n * // [1, 5, 0] after 5s\r\n * // [1, 5, 10] after 10s\r\n *\r\n *\r\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\r\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\r\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\r\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\r\n * bmi.subscribe(x => console.log('BMI is ' + x));\r\n *\r\n * // With output to console:\r\n * // BMI is 24.212293388429753\r\n * // BMI is 23.93948099205209\r\n * // BMI is 23.671253629592222\r\n *\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link merge}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\r\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\r\n * More than one input Observables may be given as arguments\r\n * or an array of Observables may be given as the first argument.\r\n * @param {function} [project] An optional function to project the values from\r\n * the combined latest values into a new value on the output Observable.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\r\n * each input Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @static true\r\n * @name combineLatest\r\n * @owner Observable\r\n ",
          "range": [
            255,
            5759
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 113,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "combineLatest",
          "range": [
            5777,
            5790
          ],
          "loc": {
            "start": {
              "line": 114,
              "column": 16
            },
            "end": {
              "line": 114,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                5794,
                5805
              ],
              "loc": {
                "start": {
                  "line": 114,
                  "column": 33
                },
                "end": {
                  "line": 114,
                  "column": 44
                }
              }
            },
            "range": [
              5791,
              5805
            ],
            "loc": {
              "start": {
                "line": 114,
                "column": 30
              },
              "end": {
                "line": 114,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "project",
                    "range": [
                      5818,
                      5825
                    ],
                    "loc": {
                      "start": {
                        "line": 115,
                        "column": 8
                      },
                      "end": {
                        "line": 115,
                        "column": 15
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      5828,
                      5832
                    ],
                    "loc": {
                      "start": {
                        "line": 115,
                        "column": 18
                      },
                      "end": {
                        "line": 115,
                        "column": 22
                      }
                    }
                  },
                  "range": [
                    5818,
                    5832
                  ],
                  "loc": {
                    "start": {
                      "line": 115,
                      "column": 8
                    },
                    "end": {
                      "line": 115,
                      "column": 22
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                5814,
                5833
              ],
              "loc": {
                "start": {
                  "line": 115,
                  "column": 4
                },
                "end": {
                  "line": 115,
                  "column": 23
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      5843,
                      5852
                    ],
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 8
                      },
                      "end": {
                        "line": 116,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      5855,
                      5859
                    ],
                    "loc": {
                      "start": {
                        "line": 116,
                        "column": 20
                      },
                      "end": {
                        "line": 116,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    5843,
                    5859
                  ],
                  "loc": {
                    "start": {
                      "line": 116,
                      "column": 8
                    },
                    "end": {
                      "line": 116,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                5839,
                5860
              ],
              "loc": {
                "start": {
                  "line": 116,
                  "column": 4
                },
                "end": {
                  "line": 116,
                  "column": 25
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    5870,
                    5881
                  ],
                  "loc": {
                    "start": {
                      "line": 117,
                      "column": 8
                    },
                    "end": {
                      "line": 117,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        5882,
                        5893
                      ],
                      "loc": {
                        "start": {
                          "line": 117,
                          "column": 20
                        },
                        "end": {
                          "line": 117,
                          "column": 31
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            5894,
                            5905
                          ],
                          "loc": {
                            "start": {
                              "line": 117,
                              "column": 32
                            },
                            "end": {
                              "line": 117,
                              "column": 43
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            5906,
                            5912
                          ],
                          "loc": {
                            "start": {
                              "line": 117,
                              "column": 44
                            },
                            "end": {
                              "line": 117,
                              "column": 50
                            }
                          }
                        },
                        "range": [
                          5894,
                          5912
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 32
                          },
                          "end": {
                            "line": 117,
                            "column": 50
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          5915,
                          5916
                        ],
                        "loc": {
                          "start": {
                            "line": 117,
                            "column": 53
                          },
                          "end": {
                            "line": 117,
                            "column": 54
                          }
                        }
                      },
                      "range": [
                        5894,
                        5916
                      ],
                      "loc": {
                        "start": {
                          "line": 117,
                          "column": 32
                        },
                        "end": {
                          "line": 117,
                          "column": 54
                        }
                      }
                    },
                    "range": [
                      5882,
                      5917
                    ],
                    "loc": {
                      "start": {
                        "line": 117,
                        "column": 20
                      },
                      "end": {
                        "line": 117,
                        "column": 55
                      }
                    }
                  }
                ],
                "range": [
                  5870,
                  5918
                ],
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 8
                  },
                  "end": {
                    "line": 117,
                    "column": 56
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          5931,
                          5940
                        ],
                        "loc": {
                          "start": {
                            "line": 118,
                            "column": 8
                          },
                          "end": {
                            "line": 118,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              5943,
                              5954
                            ],
                            "loc": {
                              "start": {
                                "line": 118,
                                "column": 20
                              },
                              "end": {
                                "line": 118,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              5955,
                              5958
                            ],
                            "loc": {
                              "start": {
                                "line": 118,
                                "column": 32
                              },
                              "end": {
                                "line": 118,
                                "column": 35
                              }
                            }
                          },
                          "range": [
                            5943,
                            5958
                          ],
                          "loc": {
                            "start": {
                              "line": 118,
                              "column": 20
                            },
                            "end": {
                              "line": 118,
                              "column": 35
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          5943,
                          5960
                        ],
                        "loc": {
                          "start": {
                            "line": 118,
                            "column": 20
                          },
                          "end": {
                            "line": 118,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        5931,
                        5960
                      ],
                      "loc": {
                        "start": {
                          "line": 118,
                          "column": 8
                        },
                        "end": {
                          "line": 118,
                          "column": 37
                        }
                      }
                    },
                    "range": [
                      5931,
                      5961
                    ],
                    "loc": {
                      "start": {
                        "line": 118,
                        "column": 8
                      },
                      "end": {
                        "line": 118,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  5920,
                  5968
                ],
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 58
                  },
                  "end": {
                    "line": 119,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                5866,
                5968
              ],
              "loc": {
                "start": {
                  "line": 117,
                  "column": 4
                },
                "end": {
                  "line": 119,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        5985,
                        5996
                      ],
                      "loc": {
                        "start": {
                          "line": 120,
                          "column": 15
                        },
                        "end": {
                          "line": 120,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            5997,
                            6008
                          ],
                          "loc": {
                            "start": {
                              "line": 120,
                              "column": 27
                            },
                            "end": {
                              "line": 120,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            6009,
                            6015
                          ],
                          "loc": {
                            "start": {
                              "line": 120,
                              "column": 39
                            },
                            "end": {
                              "line": 120,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          5997,
                          6015
                        ],
                        "loc": {
                          "start": {
                            "line": 120,
                            "column": 27
                          },
                          "end": {
                            "line": 120,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          6018,
                          6019
                        ],
                        "loc": {
                          "start": {
                            "line": 120,
                            "column": 48
                          },
                          "end": {
                            "line": 120,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        5997,
                        6019
                      ],
                      "loc": {
                        "start": {
                          "line": 120,
                          "column": 27
                        },
                        "end": {
                          "line": 120,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      5985,
                      6020
                    ],
                    "loc": {
                      "start": {
                        "line": 120,
                        "column": 15
                      },
                      "end": {
                        "line": 120,
                        "column": 50
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    5978,
                    6020
                  ],
                  "loc": {
                    "start": {
                      "line": 120,
                      "column": 8
                    },
                    "end": {
                      "line": 120,
                      "column": 50
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    6025,
                    6035
                  ],
                  "loc": {
                    "start": {
                      "line": 120,
                      "column": 55
                    },
                    "end": {
                      "line": 120,
                      "column": 65
                    }
                  }
                },
                "range": [
                  5978,
                  6035
                ],
                "loc": {
                  "start": {
                    "line": 120,
                    "column": 8
                  },
                  "end": {
                    "line": 120,
                    "column": 65
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          6048,
                          6055
                        ],
                        "loc": {
                          "start": {
                            "line": 121,
                            "column": 8
                          },
                          "end": {
                            "line": 121,
                            "column": 15
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              6058,
                              6069
                            ],
                            "loc": {
                              "start": {
                                "line": 121,
                                "column": 18
                              },
                              "end": {
                                "line": 121,
                                "column": 29
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              6070,
                              6073
                            ],
                            "loc": {
                              "start": {
                                "line": 121,
                                "column": 30
                              },
                              "end": {
                                "line": 121,
                                "column": 33
                              }
                            }
                          },
                          "range": [
                            6058,
                            6073
                          ],
                          "loc": {
                            "start": {
                              "line": 121,
                              "column": 18
                            },
                            "end": {
                              "line": 121,
                              "column": 33
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          6058,
                          6075
                        ],
                        "loc": {
                          "start": {
                            "line": 121,
                            "column": 18
                          },
                          "end": {
                            "line": 121,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        6048,
                        6075
                      ],
                      "loc": {
                        "start": {
                          "line": 121,
                          "column": 8
                        },
                        "end": {
                          "line": 121,
                          "column": 35
                        }
                      }
                    },
                    "range": [
                      6048,
                      6076
                    ],
                    "loc": {
                      "start": {
                        "line": 121,
                        "column": 8
                      },
                      "end": {
                        "line": 121,
                        "column": 36
                      }
                    }
                  }
                ],
                "range": [
                  6037,
                  6083
                ],
                "loc": {
                  "start": {
                    "line": 120,
                    "column": 67
                  },
                  "end": {
                    "line": 122,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                5974,
                6083
              ],
              "loc": {
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 122,
                  "column": 5
                }
              },
              "trailingComments": [
                {
                  "type": "Line",
                  "value": " if the first and only other argument besides the resultSelector is an array",
                  "range": [
                    6089,
                    6167
                  ],
                  "loc": {
                    "start": {
                      "line": 123,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 82
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
                  "range": [
                    6173,
                    6249
                  ],
                  "loc": {
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 124,
                      "column": 80
                    }
                  }
                }
              ]
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        6259,
                        6270
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 8
                        },
                        "end": {
                          "line": 125,
                          "column": 19
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        6271,
                        6277
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 20
                        },
                        "end": {
                          "line": 125,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      6259,
                      6277
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 8
                      },
                      "end": {
                        "line": 125,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "range": [
                      6282,
                      6283
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 31
                      },
                      "end": {
                        "line": 125,
                        "column": 32
                      }
                    }
                  },
                  "range": [
                    6259,
                    6283
                  ],
                  "loc": {
                    "start": {
                      "line": 125,
                      "column": 8
                    },
                    "end": {
                      "line": 125,
                      "column": 32
                    }
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArray",
                    "range": [
                      6287,
                      6294
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 36
                      },
                      "end": {
                        "line": 125,
                        "column": 43
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          6295,
                          6306
                        ],
                        "loc": {
                          "start": {
                            "line": 125,
                            "column": 44
                          },
                          "end": {
                            "line": 125,
                            "column": 55
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          6307,
                          6308
                        ],
                        "loc": {
                          "start": {
                            "line": 125,
                            "column": 56
                          },
                          "end": {
                            "line": 125,
                            "column": 57
                          }
                        }
                      },
                      "range": [
                        6295,
                        6309
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 44
                        },
                        "end": {
                          "line": 125,
                          "column": 58
                        }
                      }
                    }
                  ],
                  "range": [
                    6287,
                    6310
                  ],
                  "loc": {
                    "start": {
                      "line": 125,
                      "column": 36
                    },
                    "end": {
                      "line": 125,
                      "column": 59
                    }
                  }
                },
                "range": [
                  6259,
                  6310
                ],
                "loc": {
                  "start": {
                    "line": 125,
                    "column": 8
                  },
                  "end": {
                    "line": 125,
                    "column": 59
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          6323,
                          6334
                        ],
                        "loc": {
                          "start": {
                            "line": 126,
                            "column": 8
                          },
                          "end": {
                            "line": 126,
                            "column": 19
                          }
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            6337,
                            6348
                          ],
                          "loc": {
                            "start": {
                              "line": 126,
                              "column": 22
                            },
                            "end": {
                              "line": 126,
                              "column": 33
                            }
                          }
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            6349,
                            6350
                          ],
                          "loc": {
                            "start": {
                              "line": 126,
                              "column": 34
                            },
                            "end": {
                              "line": 126,
                              "column": 35
                            }
                          }
                        },
                        "range": [
                          6337,
                          6351
                        ],
                        "loc": {
                          "start": {
                            "line": 126,
                            "column": 22
                          },
                          "end": {
                            "line": 126,
                            "column": 36
                          }
                        }
                      },
                      "range": [
                        6323,
                        6351
                      ],
                      "loc": {
                        "start": {
                          "line": 126,
                          "column": 8
                        },
                        "end": {
                          "line": 126,
                          "column": 36
                        }
                      }
                    },
                    "range": [
                      6323,
                      6352
                    ],
                    "loc": {
                      "start": {
                        "line": 126,
                        "column": 8
                      },
                      "end": {
                        "line": 126,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  6312,
                  6359
                ],
                "loc": {
                  "start": {
                    "line": 125,
                    "column": 61
                  },
                  "end": {
                    "line": 127,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                6255,
                6359
              ],
              "loc": {
                "start": {
                  "line": 125,
                  "column": 4
                },
                "end": {
                  "line": 127,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Line",
                  "value": " if the first and only other argument besides the resultSelector is an array",
                  "range": [
                    6089,
                    6167
                  ],
                  "loc": {
                    "start": {
                      "line": 123,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 82
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
                  "range": [
                    6173,
                    6249
                  ],
                  "loc": {
                    "start": {
                      "line": 124,
                      "column": 4
                    },
                    "end": {
                      "line": 124,
                      "column": 80
                    }
                  }
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        6376,
                        6391
                      ],
                      "loc": {
                        "start": {
                          "line": 128,
                          "column": 15
                        },
                        "end": {
                          "line": 128,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          6392,
                          6403
                        ],
                        "loc": {
                          "start": {
                            "line": 128,
                            "column": 31
                          },
                          "end": {
                            "line": 128,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          6405,
                          6414
                        ],
                        "loc": {
                          "start": {
                            "line": 128,
                            "column": 44
                          },
                          "end": {
                            "line": 128,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      6372,
                      6415
                    ],
                    "loc": {
                      "start": {
                        "line": 128,
                        "column": 11
                      },
                      "end": {
                        "line": 128,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      6416,
                      6420
                    ],
                    "loc": {
                      "start": {
                        "line": 128,
                        "column": 55
                      },
                      "end": {
                        "line": 128,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    6372,
                    6420
                  ],
                  "loc": {
                    "start": {
                      "line": 128,
                      "column": 11
                    },
                    "end": {
                      "line": 128,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "CombineLatestOperator",
                      "range": [
                        6425,
                        6446
                      ],
                      "loc": {
                        "start": {
                          "line": 128,
                          "column": 64
                        },
                        "end": {
                          "line": 128,
                          "column": 85
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          6447,
                          6454
                        ],
                        "loc": {
                          "start": {
                            "line": 128,
                            "column": 86
                          },
                          "end": {
                            "line": 128,
                            "column": 93
                          }
                        }
                      }
                    ],
                    "range": [
                      6421,
                      6455
                    ],
                    "loc": {
                      "start": {
                        "line": 128,
                        "column": 60
                      },
                      "end": {
                        "line": 128,
                        "column": 94
                      }
                    }
                  }
                ],
                "range": [
                  6372,
                  6456
                ],
                "loc": {
                  "start": {
                    "line": 128,
                    "column": 11
                  },
                  "end": {
                    "line": 128,
                    "column": 95
                  }
                }
              },
              "range": [
                6365,
                6457
              ],
              "loc": {
                "start": {
                  "line": 128,
                  "column": 4
                },
                "end": {
                  "line": 128,
                  "column": 96
                }
              }
            }
          ],
          "range": [
            5807,
            6460
          ],
          "loc": {
            "start": {
              "line": 114,
              "column": 46
            },
            "end": {
              "line": 129,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          5768,
          6460
        ],
        "loc": {
          "start": {
            "line": 114,
            "column": 7
          },
          "end": {
            "line": 129,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              218,
              253
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\r\n * Combines multiple Observables to create an Observable whose values are\r\n * calculated from the latest values of each of its input Observables.\r\n *\r\n * <span class=\"informal\">Whenever any input Observable emits a value, it\r\n * computes a formula using the latest values from all the inputs, then emits\r\n * the output of that formula.</span>\r\n *\r\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\r\n *\r\n * `combineLatest` combines the values from all the Observables passed as\r\n * arguments. This is done by subscribing to each Observable in order and,\r\n * whenever any Observable emits, collecting an array of the most recent\r\n * values from each Observable. So if you pass `n` Observables to operator,\r\n * returned Observable will always emit an array of `n` values, in order\r\n * corresponding to order of passed Observables (value from the first Observable\r\n * on the first place and so on).\r\n *\r\n * Static version of `combineLatest` accepts either an array of Observables\r\n * or each Observable can be put directly as an argument. Note that array of\r\n * Observables is good choice, if you don't know beforehand how many Observables\r\n * you will combine. Passing empty array will result in Observable that\r\n * completes immediately.\r\n *\r\n * To ensure output array has always the same length, `combineLatest` will\r\n * actually wait for all input Observables to emit at least once,\r\n * before it starts emitting results. This means if some Observable emits\r\n * values before other Observables started emitting, all that values but last\r\n * will be lost. On the other hand, is some Observable does not emit value but\r\n * completes, resulting Observable will complete at the same moment without\r\n * emitting anything, since it will be now impossible to include value from\r\n * completed Observable in resulting array. Also, if some input Observable does\r\n * not emit any value and never completes, `combineLatest` will also never emit\r\n * and never complete, since, again, it will wait for all streams to emit some\r\n * value.\r\n *\r\n * If at least one Observable was passed to `combineLatest` and all passed Observables\r\n * emitted something, resulting Observable will complete when all combined\r\n * streams complete. So even if some Observable completes, result of\r\n * `combineLatest` will still emit values when other Observables do. In case\r\n * of completed Observable, its value from now on will always be the last\r\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\r\n * will error immediately as well, and all other Observables will be unsubscribed.\r\n *\r\n * `combineLatest` accepts as optional parameter `project` function, which takes\r\n * as arguments all values that would normally be emitted by resulting Observable.\r\n * `project` can return any kind of value, which will be then emitted by Observable\r\n * instead of default array. Note that `project` does not take as argument that array\r\n * of values, but values themselves. That means default `project` can be imagined\r\n * as function that takes all its arguments and puts them into an array.\r\n *\r\n *\r\n * @example <caption>Combine two timer Observables</caption>\r\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\r\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\r\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\r\n * combinedTimers.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0] after 0.5s\r\n * // [1, 0] after 1s\r\n * // [1, 1] after 1.5s\r\n * // [2, 1] after 2s\r\n *\r\n *\r\n * @example <caption>Combine an array of Observables</caption>\r\n * const observables = [1, 5, 10].map(\r\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\r\n * );\r\n * const combined = Rx.Observable.combineLatest(observables);\r\n * combined.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0, 0] immediately\r\n * // [1, 0, 0] after 1s\r\n * // [1, 5, 0] after 5s\r\n * // [1, 5, 10] after 10s\r\n *\r\n *\r\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\r\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\r\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\r\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\r\n * bmi.subscribe(x => console.log('BMI is ' + x));\r\n *\r\n * // With output to console:\r\n * // BMI is 24.212293388429753\r\n * // BMI is 23.93948099205209\r\n * // BMI is 23.671253629592222\r\n *\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link merge}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\r\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\r\n * More than one input Observables may be given as arguments\r\n * or an array of Observables may be given as the first argument.\r\n * @param {function} [project] An optional function to project the values from\r\n * the combined latest values into a new value on the output Observable.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\r\n * each input Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @static true\r\n * @name combineLatest\r\n * @owner Observable\r\n ",
            "range": [
              255,
              5759
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 113,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=combineLatest.js.map",
            "range": [
              6462,
              6503
            ],
            "loc": {
              "start": {
                "line": 130,
                "column": 0
              },
              "end": {
                "line": 130,
                "column": 41
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        5761,
        6460
      ],
      "loc": {
        "start": {
          "line": 114,
          "column": 0
        },
        "end": {
          "line": 129,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            218,
            253
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\r\n * Combines multiple Observables to create an Observable whose values are\r\n * calculated from the latest values of each of its input Observables.\r\n *\r\n * <span class=\"informal\">Whenever any input Observable emits a value, it\r\n * computes a formula using the latest values from all the inputs, then emits\r\n * the output of that formula.</span>\r\n *\r\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\r\n *\r\n * `combineLatest` combines the values from all the Observables passed as\r\n * arguments. This is done by subscribing to each Observable in order and,\r\n * whenever any Observable emits, collecting an array of the most recent\r\n * values from each Observable. So if you pass `n` Observables to operator,\r\n * returned Observable will always emit an array of `n` values, in order\r\n * corresponding to order of passed Observables (value from the first Observable\r\n * on the first place and so on).\r\n *\r\n * Static version of `combineLatest` accepts either an array of Observables\r\n * or each Observable can be put directly as an argument. Note that array of\r\n * Observables is good choice, if you don't know beforehand how many Observables\r\n * you will combine. Passing empty array will result in Observable that\r\n * completes immediately.\r\n *\r\n * To ensure output array has always the same length, `combineLatest` will\r\n * actually wait for all input Observables to emit at least once,\r\n * before it starts emitting results. This means if some Observable emits\r\n * values before other Observables started emitting, all that values but last\r\n * will be lost. On the other hand, is some Observable does not emit value but\r\n * completes, resulting Observable will complete at the same moment without\r\n * emitting anything, since it will be now impossible to include value from\r\n * completed Observable in resulting array. Also, if some input Observable does\r\n * not emit any value and never completes, `combineLatest` will also never emit\r\n * and never complete, since, again, it will wait for all streams to emit some\r\n * value.\r\n *\r\n * If at least one Observable was passed to `combineLatest` and all passed Observables\r\n * emitted something, resulting Observable will complete when all combined\r\n * streams complete. So even if some Observable completes, result of\r\n * `combineLatest` will still emit values when other Observables do. In case\r\n * of completed Observable, its value from now on will always be the last\r\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\r\n * will error immediately as well, and all other Observables will be unsubscribed.\r\n *\r\n * `combineLatest` accepts as optional parameter `project` function, which takes\r\n * as arguments all values that would normally be emitted by resulting Observable.\r\n * `project` can return any kind of value, which will be then emitted by Observable\r\n * instead of default array. Note that `project` does not take as argument that array\r\n * of values, but values themselves. That means default `project` can be imagined\r\n * as function that takes all its arguments and puts them into an array.\r\n *\r\n *\r\n * @example <caption>Combine two timer Observables</caption>\r\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\r\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\r\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\r\n * combinedTimers.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0] after 0.5s\r\n * // [1, 0] after 1s\r\n * // [1, 1] after 1.5s\r\n * // [2, 1] after 2s\r\n *\r\n *\r\n * @example <caption>Combine an array of Observables</caption>\r\n * const observables = [1, 5, 10].map(\r\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\r\n * );\r\n * const combined = Rx.Observable.combineLatest(observables);\r\n * combined.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0, 0] immediately\r\n * // [1, 0, 0] after 1s\r\n * // [1, 5, 0] after 5s\r\n * // [1, 5, 10] after 10s\r\n *\r\n *\r\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\r\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\r\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\r\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\r\n * bmi.subscribe(x => console.log('BMI is ' + x));\r\n *\r\n * // With output to console:\r\n * // BMI is 24.212293388429753\r\n * // BMI is 23.93948099205209\r\n * // BMI is 23.671253629592222\r\n *\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link merge}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\r\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\r\n * More than one input Observables may be given as arguments\r\n * or an array of Observables may be given as the first argument.\r\n * @param {function} [project] An optional function to project the values from\r\n * the combined latest values into a new value on the output Observable.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\r\n * each input Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @static true\r\n * @name combineLatest\r\n * @owner Observable\r\n ",
          "range": [
            255,
            5759
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 113,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=combineLatest.js.map",
          "range": [
            6462,
            6503
          ],
          "loc": {
            "start": {
              "line": 130,
              "column": 0
            },
            "end": {
              "line": 130,
              "column": 41
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    6460
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 129,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        218,
        253
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\r\n * Combines multiple Observables to create an Observable whose values are\r\n * calculated from the latest values of each of its input Observables.\r\n *\r\n * <span class=\"informal\">Whenever any input Observable emits a value, it\r\n * computes a formula using the latest values from all the inputs, then emits\r\n * the output of that formula.</span>\r\n *\r\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\r\n *\r\n * `combineLatest` combines the values from all the Observables passed as\r\n * arguments. This is done by subscribing to each Observable in order and,\r\n * whenever any Observable emits, collecting an array of the most recent\r\n * values from each Observable. So if you pass `n` Observables to operator,\r\n * returned Observable will always emit an array of `n` values, in order\r\n * corresponding to order of passed Observables (value from the first Observable\r\n * on the first place and so on).\r\n *\r\n * Static version of `combineLatest` accepts either an array of Observables\r\n * or each Observable can be put directly as an argument. Note that array of\r\n * Observables is good choice, if you don't know beforehand how many Observables\r\n * you will combine. Passing empty array will result in Observable that\r\n * completes immediately.\r\n *\r\n * To ensure output array has always the same length, `combineLatest` will\r\n * actually wait for all input Observables to emit at least once,\r\n * before it starts emitting results. This means if some Observable emits\r\n * values before other Observables started emitting, all that values but last\r\n * will be lost. On the other hand, is some Observable does not emit value but\r\n * completes, resulting Observable will complete at the same moment without\r\n * emitting anything, since it will be now impossible to include value from\r\n * completed Observable in resulting array. Also, if some input Observable does\r\n * not emit any value and never completes, `combineLatest` will also never emit\r\n * and never complete, since, again, it will wait for all streams to emit some\r\n * value.\r\n *\r\n * If at least one Observable was passed to `combineLatest` and all passed Observables\r\n * emitted something, resulting Observable will complete when all combined\r\n * streams complete. So even if some Observable completes, result of\r\n * `combineLatest` will still emit values when other Observables do. In case\r\n * of completed Observable, its value from now on will always be the last\r\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\r\n * will error immediately as well, and all other Observables will be unsubscribed.\r\n *\r\n * `combineLatest` accepts as optional parameter `project` function, which takes\r\n * as arguments all values that would normally be emitted by resulting Observable.\r\n * `project` can return any kind of value, which will be then emitted by Observable\r\n * instead of default array. Note that `project` does not take as argument that array\r\n * of values, but values themselves. That means default `project` can be imagined\r\n * as function that takes all its arguments and puts them into an array.\r\n *\r\n *\r\n * @example <caption>Combine two timer Observables</caption>\r\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\r\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\r\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\r\n * combinedTimers.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0] after 0.5s\r\n * // [1, 0] after 1s\r\n * // [1, 1] after 1.5s\r\n * // [2, 1] after 2s\r\n *\r\n *\r\n * @example <caption>Combine an array of Observables</caption>\r\n * const observables = [1, 5, 10].map(\r\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\r\n * );\r\n * const combined = Rx.Observable.combineLatest(observables);\r\n * combined.subscribe(value => console.log(value));\r\n * // Logs\r\n * // [0, 0, 0] immediately\r\n * // [1, 0, 0] after 1s\r\n * // [1, 5, 0] after 5s\r\n * // [1, 5, 10] after 10s\r\n *\r\n *\r\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\r\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\r\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\r\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\r\n * bmi.subscribe(x => console.log('BMI is ' + x));\r\n *\r\n * // With output to console:\r\n * // BMI is 24.212293388429753\r\n * // BMI is 23.93948099205209\r\n * // BMI is 23.671253629592222\r\n *\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link merge}\r\n * @see {@link withLatestFrom}\r\n *\r\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\r\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\r\n * More than one input Observables may be given as arguments\r\n * or an array of Observables may be given as the first argument.\r\n * @param {function} [project] An optional function to project the values from\r\n * the combined latest values into a new value on the output Observable.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\r\n * each input Observable.\r\n * @return {Observable} An Observable of projected values from the most recent\r\n * values from each input Observable, or an array of the most recent values from\r\n * each input Observable.\r\n * @static true\r\n * @name combineLatest\r\n * @owner Observable\r\n ",
      "range": [
        255,
        5759
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 113,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": " if the first and only other argument besides the resultSelector is an array",
      "range": [
        6089,
        6167
      ],
      "loc": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 82
        }
      }
    },
    {
      "type": "Line",
      "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
      "range": [
        6173,
        6249
      ],
      "loc": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 80
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=combineLatest.js.map",
      "range": [
        6462,
        6503
      ],
      "loc": {
        "start": {
          "line": 130,
          "column": 0
        },
        "end": {
          "line": 130,
          "column": 41
        }
      }
    }
  ]
}